//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
    
    public static int cnt=500;
    public static String stexp=new String();;
    public static Vector<Integer> V=new Vector<Integer> ();
    int expreg=-1;
   public R visit(NodeList n, A argu) {
      R _ret=null;
        _ret=(R)"";
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
       Vector<Integer> Temp_V=new Vector<Integer>();
      if ( n.present() ) {
         R _ret=null;
           _ret=(R)"";
         int _count=0;
          String Code="";
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            Code=Code+(String)e.nextElement().accept(this,argu)+"\n";
             Temp_V.add(expreg);
            _count++;
         }
          _ret=(R)Code;
          V=Temp_V;
         return _ret;
      }
      else
         return (R)"";
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return (R)"";
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
        _ret=(R)"";
      int _count=0;
       String Code="";
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         Code=Code+(String)e.nextElement().accept(this,argu)+" ";
         _count++;
      }
       _ret=(R)Code;
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
       String Code="";
      n.f0.accept(this, argu);
       Code=Code+"MAIN\n";
      Code=Code+(String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
       Code=Code+"END\n";
      Code=Code+(String)n.f3.accept(this, argu)+"\n";
      n.f4.accept(this, argu);
       System.out.println(Code);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
       _ret=(R)"";
      _ret=(R)n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
       _ret=(R)"";
       String Code="";
      Code=Code+(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
       Code=Code+"[";
      Code=Code+((String)n.f2.accept(this, argu));
      n.f3.accept(this, argu);
       Code=Code+"]\n";
      Code=Code+(String)n.f4.accept(this, argu)+"\n";
       _ret=(R)Code;
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
        _ret=(R)"";
      _ret=(R)n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
        _ret=(R)"";
      n.f0.accept(this, argu);
       _ret=(R)("NOOP\n");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
        _ret=(R)"";
      n.f0.accept(this, argu);
       _ret=(R)("ERROR\n");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Exp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
        _ret=(R)"";
       String Code="";
      n.f0.accept(this, argu);
      String exp=(String)n.f1.accept(this, argu);
       int reg1=expreg;
       cnt++;
       int reg=cnt;
       Code=Code+exp+"\n";
       Code=Code+"MOVE TEMP "+Integer.toString(reg)+" TEMP "+Integer.toString(reg1)+"\n";
       Code=Code+"CJUMP "+"TEMP "+Integer.toString(reg)+" ";
      Code=Code+(String)n.f2.accept(this, argu)+"\n";
       _ret=(R)Code;
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
        _ret=(R)"";
      n.f0.accept(this, argu);
      String Code="";
       Code=Code+(String)n.f0.toString();
       Code=Code+" "+(String)n.f1.accept(this, argu)+"\n";
       _ret=(R)Code;
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Exp()
    * f2 -> IntegerLiteral()
    * f3 -> Exp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
        _ret=(R)"";
      n.f0.accept(this, argu);
       String Code="";
      String exp1=(String)n.f1.accept(this, argu);
       int reg3=expreg;
      String lit=(String)n.f2.accept(this, argu);
      String exp2=(String)n.f3.accept(this, argu);
       int reg4=expreg;
       cnt++;int reg1=cnt;cnt++;int reg2=cnt;
       Code=Code+exp1+"\n";
       Code=Code+exp2+"\n";
       Code=Code+"MOVE TEMP "+Integer.toString(reg1)+" TEMP "+Integer.toString(reg3)+"\n";
       Code=Code+"MOVE TEMP "+Integer.toString(reg2)+" TEMP "+Integer.toString(reg4)+"\n";
       Code=Code+"HSTORE "+" TEMP "+Integer.toString(reg1)+" "+lit+" "+"TEMP "+Integer.toString(reg2)+"\n";
       _ret=(R)Code;
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Exp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
        _ret=(R)"";
       String Code="";
       n.f0.accept(this, argu);
      String temp1=(String)n.f1.accept(this, argu);
      String exp1=(String)n.f2.accept(this, argu);
       int reg1=expreg;
      String lit=(String)n.f3.accept(this, argu);
       cnt++;int reg=cnt;
       Code=Code+exp1+"\n";
       Code=Code+"MOVE TEMP "+Integer.toString(reg)+" TEMP "+Integer.toString(reg1)+"\n";
       Code=Code+"HLOAD "+temp1+" "+"TEMP "+Integer.toString(reg)+" "+lit+"\n";
       _ret=(R)Code;
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
        _ret=(R)"";
       String Code="";
      n.f0.accept(this, argu);
      String Temp=(String)n.f1.accept(this, argu);
      String exp=(String)n.f2.accept(this, argu);
       int reg1=expreg;
       cnt++;int reg=cnt;
       Code=Code+exp+"\n";
       Code=Code+"MOVE "+Temp+" "+"TEMP "+Integer.toString(reg1)+"\n";
       _ret=(R)Code;
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> Exp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
        _ret=(R)"";
       String Code="";
      n.f0.accept(this, argu);
      String exp=(String)n.f1.accept(this, argu);
       int reg1=expreg;
       cnt++;int reg=cnt;
       Code=Code+exp+"\n";
       Code=Code+"MOVE TEMP "+Integer.toString(reg)+" TEMP "+Integer.toString(reg1)+"\n";
       Code=Code+"PRINT TEMP "+Integer.toString(reg)+"\n";
       _ret=(R)Code;
      return _ret;
   }

   /**
    * f0 -> StmtExp()
    *       | Call()
    *       | HAllocate()
    *       | BinOp()
    *       | Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
        _ret=(R)"";
       _ret=(R)"";
      String exp=(String)n.f0.accept(this, argu);
       String cpy="";
       for(int i=0;i<stexp.length();i++)
       {
           cpy=cpy+stexp.charAt(i);
       }
       int reg1=expreg;
       String Code="";
           if(n.f0.which==4||n.f0.which==5||n.f0.which==6){
       cnt++;
       int reg=cnt;
       Code=Code+"MOVE TEMP "+Integer.toString(reg)+" "+exp+"\n";
       expreg=reg;
       _ret=(R)Code;
           }
           else
               
           {
               if(n.f0.which!=0){
               cnt++;
               int reg=cnt;
               Code=Code+exp+"\n";
               Code=Code+"MOVE TEMP "+Integer.toString(reg)+" TEMP "+Integer.toString(reg1)+"\n";
               expreg=reg;
               _ret=(R)Code;
               }
               else
               {
                   cnt++;
                   int reg=cnt;
                   Code=Code+cpy+"\n";
                   Code=Code+"MOVE TEMP "+Integer.toString(reg)+" TEMP "+Integer.toString(reg1)+"\n";
                   expreg=reg;
                   _ret=(R)Code;
               }
           }
       
       return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> Exp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
        _ret=(R)"";
       String Code="";
      n.f0.accept(this, argu);
       Code=Code+"BEGIN\n";
       String temp1=(String)n.f1.accept(this, argu);
       Code=Code+temp1+"\n";
       String tempo="";
       tempo=tempo+"\n"+temp1+"\n";
      n.f2.accept(this, argu);
       String exp=(String)n.f3.accept(this, argu);int regg=expreg;
       cnt++;int reg1=cnt;
       Code=Code+" "+exp+"\n";
       tempo=tempo+" "+exp+"\n";
       Code=Code+"MOVE TEMP "+Integer.toString(reg1)+" TEMP "+Integer.toString(regg)+"\n";
       tempo=tempo+"MOVE TEMP "+Integer.toString(reg1)+" TEMP "+Integer.toString(regg)+"\n";
       Code=Code+"RETURN TEMP "+Integer.toString(reg1)+"\n";
      n.f4.accept(this, argu);
       Code=Code+"END\n";
       expreg=reg1;
       _ret=(R)Code;
       stexp=tempo;
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> Exp()
    * f2 -> "("
    * f3 -> ( Exp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
        _ret=(R)"";
       String Code="";
      n.f0.accept(this, argu);
      String t1=(String)n.f1.accept(this, argu);
       int reg1=expreg;
      n.f2.accept(this, argu);
      String t2=(String)n.f3.accept(this, argu);
      n.f4.accept(this, argu);
       Code=Code+t1+"\n";
       Code=Code+t2+"\n";
       cnt++;
       int reg4=cnt;
       Code=Code+"MOVE TEMP "+Integer.toString(reg4)+" CALL TEMP "+Integer.toString(reg1)+" ( ";
       for(int i=0;i<V.size();i++)
       {
           Code=Code+" TEMP "+Integer.toString(V.get(i))+" ";
       }
       Code=Code+" )\n";
       expreg=reg4;
       _ret=(R)Code;
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> Exp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
        _ret=(R)"";
       String Code="";
      n.f0.accept(this, argu);
      String exp=(String)n.f1.accept(this, argu);
       int reg1=expreg;
       Code=Code+exp+"\n";
       cnt++;
       int reg2=cnt;
       Code=Code+"MOVE TEMP "+Integer.toString(reg2)+" HALLOCATE TEMP "+Integer.toString(reg1)+"\n";
       expreg=reg2;
       _ret=(R)Code;
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Exp()
    * f2 -> Exp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
        _ret=(R)"";
       String Code="";
      String OP=(String)n.f0.accept(this, argu);
      String exp1=(String)n.f1.accept(this, argu);
       int reg1=expreg;
      String exp2=(String)n.f2.accept(this, argu);
       int reg2=expreg;
       Code=Code+exp1+"\n";
       Code=Code+exp2+"\n";
       cnt++;
       int reg3=cnt;
       Code=Code+"MOVE TEMP "+Integer.toString(reg3)+" "+OP+ " TEMP "+Integer.toString(reg1)+" TEMP "+Integer.toString(reg2)+"\n";
       _ret=(R)Code;
       expreg=reg3;
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
        _ret=(R)"";
      n.f0.accept(this, argu);
       switch(n.f0.which)
       {
           case 0:
               _ret=(R)"LE";
               break;
           case 1:
               _ret=(R)"NE";
               break;
           case 2:
               _ret=(R)"PLUS";
               break;
           case 3:
               _ret=(R)"MINUS";
               break;
           case 4:
               _ret=(R)"TIMES";
               break;
           case 5:
               _ret=(R)"DIV";
               break;
       }
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
        _ret=(R)"";
      n.f0.accept(this, argu);
       String lit=(String)n.f1.accept(this, argu);
       _ret=(R)("TEMP "+lit+" ");
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
        _ret=(R)"";
      n.f0.accept(this, argu);
       _ret=(R)(n.f0.toString());
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
        _ret=(R)"";
      n.f0.accept(this, argu);
       _ret=(R)(n.f0.toString()+" ");
      return _ret;
   }

}

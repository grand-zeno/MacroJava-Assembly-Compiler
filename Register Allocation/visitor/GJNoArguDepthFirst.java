//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public static HashMap<String,HashMap<Integer,Vector<Integer>>> in=new HashMap<String,HashMap<Integer,Vector<Integer>>>();
   public static HashMap<String,HashMap<Integer,Vector<Integer>>> out=new HashMap<String,HashMap<Integer,Vector<Integer>>>();
   public static HashMap<String,HashMap<Integer,Vector<Integer>>> use=new HashMap<String,HashMap<Integer,Vector<Integer>>>();
   public static HashMap<String,HashMap<Integer,Vector<Integer>>> def=new HashMap<String,HashMap<Integer,Vector<Integer>>>();
   public static HashMap<String,HashMap<Integer,String>> Labels=new HashMap<String,HashMap<Integer,String>>();
   public static HashMap<String,HashMap<Integer,String>> Jumps=new HashMap<String,HashMap<Integer,String>>();
   public static HashMap<String,HashMap<String,Integer>> RLabels=new HashMap<String,HashMap<String,Integer>>();
   public static HashMap<String,HashMap<Integer,Integer>> left=new HashMap<String,HashMap<Integer,Integer>>();
   public static HashMap<String,HashMap<Integer,Integer>> right=new HashMap<String,HashMap<Integer,Integer>>();
    public static HashMap<String,HashMap<Integer,Integer>> Spills;
    public static HashMap<String,HashMap<Integer,String>> Allocs;
    public static HashMap<String,Integer> args=new HashMap<String,Integer>();
    public static HashMap<String,HashMap<String,String>> Labs;
    public static HashMap<String,Integer> stksp;
   public static Vector<String> call_vec=new Vector<String>();
   public static String cur_func=new String();
   public static int line=0;
   public static int call_cnt=0;
   public static boolean iscall=false;
   public static int labcnt=0;
   
   public GJNoArguDepthFirst(HashMap<String,HashMap<Integer,Integer>> a,HashMap<String,HashMap<Integer,String>> b,HashMap<String,Integer> c,HashMap<String,HashMap<String,String>> d)
   {
   		this.Spills=a;
   		this.Allocs=b;
   		this.stksp=c;
   		this.Labs=d;
   		
   }
   
   
   
   public void Print_Table(HashMap<Integer,Vector<Integer>> H)
    {
        Iterator iter4=H.entrySet().iterator();
        while(iter4.hasNext())
        {
            Map.Entry HashMap_element = (Map.Entry)iter4.next();
            Integer St=(Integer)HashMap_element.getKey();
            Vector<Integer> Val=(Vector<Integer>)HashMap_element.getValue();
            System.out.println(St+":");
            for(int i=0;i<Val.size();i++)
            {
                System.out.println(Val.get(i));
            }
            System.out.println("\n");
        }
    }
   
    public void Print_Table1(HashMap<Integer,String> H)
    {
        Iterator iter4=H.entrySet().iterator();
        while(iter4.hasNext())
        {
            Map.Entry HashMap_element = (Map.Entry)iter4.next();
            Integer St=(Integer)HashMap_element.getKey();
            String Val=(String)HashMap_element.getValue();
            System.out.println(St);
            System.out.println(Val+"\n");
        }
    }
   
   public void print()
   {
   		//System.out.println("\nUse\n");
   		Iterator iter4=use.entrySet().iterator();
        while(iter4.hasNext())
        {
        	Map.Entry HashMap_element = (Map.Entry)iter4.next();
        	String St=(String)HashMap_element.getKey();
        	System.out.println(St+":");
        	HashMap<Integer,Vector<Integer>> Val=(HashMap<Integer,Vector<Integer>>)HashMap_element.getValue();
        	Print_Table(Val);
        }
        System.out.println("\nDef\n");
        iter4=def.entrySet().iterator();
        while(iter4.hasNext())
        {
        	Map.Entry HashMap_element = (Map.Entry)iter4.next();
        	String St=(String)HashMap_element.getKey();
        	System.out.println(St+":");
        	HashMap<Integer,Vector<Integer>> Val=(HashMap<Integer,Vector<Integer>>)HashMap_element.getValue();
        	Print_Table(Val);
        }
       System.out.println("\nLabels\n");
       iter4=Jumps.entrySet().iterator();
       while(iter4.hasNext())
       {
           Map.Entry HashMap_element = (Map.Entry)iter4.next();
           String St=(String)HashMap_element.getKey();
           System.out.println(St+":");
           HashMap<Integer,String> Val=(HashMap<Integer,String>)HashMap_element.getValue();
           Print_Table1(Val);
       }
       System.out.println("\nIn\n");
       iter4=in.entrySet().iterator();
       while(iter4.hasNext())
       {
           Map.Entry HashMap_element = (Map.Entry)iter4.next();
           String St=(String)HashMap_element.getKey();
        
           System.out.println(St+":");
           HashMap<Integer,Vector<Integer>> Val=(HashMap<Integer,Vector<Integer>>)HashMap_element.getValue();
           Print_Table(Val);
           
       }
       System.out.println("\nOut\n");
       iter4=out.entrySet().iterator();
       while(iter4.hasNext())
       {
           Map.Entry HashMap_element = (Map.Entry)iter4.next();
           String St=(String)HashMap_element.getKey();
           
           System.out.println(St+":");
           HashMap<Integer,Vector<Integer>> Val=(HashMap<Integer,Vector<Integer>>)HashMap_element.getValue();
               Print_Table(Val);
       }
       
       System.out.println("\n(L,R)\n");
       iter4=left.entrySet().iterator();
       Iterator iter5=right.entrySet().iterator();
       while(iter4.hasNext())
       {
           Map.Entry HashMap_element = (Map.Entry)iter4.next();
           Map.Entry HashMap_element1 = (Map.Entry)iter5.next();
           String St=(String)HashMap_element.getKey();
           String St1=(String)HashMap_element1.getKey();
           System.out.println(St+":");
           HashMap<Integer,Integer> Val=(HashMap<Integer,Integer>)HashMap_element.getValue();
           HashMap<Integer,Integer> Val1=(HashMap<Integer,Integer>)HashMap_element1.getValue();
           System.out.println("Left:");System.out.println(Val);
           System.out.println("Right:");System.out.println(Val1);
       }
       System.out.println("\nAllocs\n");
       iter4=Allocs.entrySet().iterator();
       while(iter4.hasNext())
       {
           Map.Entry HashMap_element = (Map.Entry)iter4.next();
           String St=(String)HashMap_element.getKey();
           System.out.println(St+":");
           HashMap<Integer,String> Val=(HashMap<Integer,String>)HashMap_element.getValue();
           System.out.println(Val);
       }
       System.out.println("\nSpills\n");
       iter4=Spills.entrySet().iterator();
       while(iter4.hasNext())
       {
           Map.Entry HashMap_element = (Map.Entry)iter4.next();
           String St=(String)HashMap_element.getKey();
           System.out.println(St+":");
           HashMap<Integer,Integer> Val=(HashMap<Integer,Integer>)HashMap_element.getValue();
           System.out.println(Val);
       }
   }
   
   public Vector<Integer> union(Vector<Integer> v1,Vector<Integer> v2)
   {
       Vector<Integer> ret_vec=new Vector<Integer>();
       for(int i=0;i<v1.size();i++)
       {
           ret_vec.add(v1.get(i));
       }
       for(int i=0;i<v2.size();i++)
       {
           boolean c=false;
           for(int j=0;j<ret_vec.size();j++)
           {
               if(ret_vec.get(j).equals(v2.get(i)))
               {
                   c=true;
                   break;
               }
           }
           if(!c)
           {
               ret_vec.add(v2.get(i));
           }
       }
       return ret_vec;
   }
    
   public Vector<Integer> Diff(Vector<Integer> v1,Vector<Integer> v2)
   {
       Vector<Integer> ret_vec=new Vector<Integer>();
       for(int i=0;i<v1.size();i++)
       {
           boolean c=false;
           for(int j=0;j<v2.size();j++)
           {
               if(v2.get(j).equals(v1.get(i)))
               {
                   c=true;
                   break;
               }
           }
           if(!c)
           {
               ret_vec.add(v1.get(i));
           }
       }
       return ret_vec;
   }
    
   public boolean equal(Vector<Integer> v1,Vector<Integer> v2)
   {
       if(Diff(v1,v2).size()==0&&Diff(v2,v1).size()==0)
       {
           return true;
       }
       return false;
   }
    public Vector<Integer> get_vec(Vector<Integer> v)
    {
        Vector<Integer> ret_vec=new Vector<Integer>();
        for(int i=0;i<v.size();i++)
        {
            ret_vec.add(v.get(i));
        }
        return ret_vec;
    }
    public void cons(String Func)
    {
        HashMap<Integer,Vector<Integer>> cout=out.get(Func);
        HashMap<Integer,Vector<Integer>> cin=in.get(Func);
        HashMap<Integer,Vector<Integer>> cdef=def.get(Func);
        HashMap<Integer,Vector<Integer>> cuse=use.get(Func);
        int n=0;
        while(cdef.containsKey(n))
        {
            cout.put(n,new Vector<Integer>());
            cin.put(n,new Vector<Integer>());
            n++;
        }
        while(true)
        {
            boolean c=true;
            n=0;
            while(cdef.containsKey(n))
            {
                Vector<Integer> pout=get_vec(cout.get(n));
                Vector<Integer> pin=get_vec(cin.get(n));
                cin.put(n,union(cuse.get(n),Diff(cout.get(n),cdef.get(n))));
                Vector<Integer> Temp=new Vector<Integer>();
                if(cdef.containsKey(n+1))
                {
                    Temp=union(Temp,cin.get(n+1));
                }
                if((Jumps.get(Func)).containsKey(n))
                {
                    String L=(Jumps.get(Func)).get(n);
                    Temp=union(Temp,cin.get(RLabels.get(Func).get(L)));
                }
                cout.put(n,Temp);
                if(!equal(cin.get(n),pin)||!equal(cout.get(n),pout))
                {
                    c=false;
                }
                n++;
            }
            if(c)
            {
                break;
            }
        }
        n=0;
        while(cdef.containsKey(n))
        {
            for(int i=0;i<cout.get(n).size();i++)
            {
                int tmp=cout.get(n).get(i);
                /*if(left.get(Func).containsKey(tmp))
                {
                    left.get(Func).put(tmp,Math.min(left.get(Func).get(tmp),n));
                }
                else
                {
                    left.get(Func).put(tmp,n);
                }*/
                if(right.get(Func).containsKey(tmp))
                {
                    right.get(Func).put(tmp,Math.max(right.get(Func).get(tmp),n));
                }
                else
                {
                    right.get(Func).put(tmp,n);
                }
            }
            for(int i=0;i<cin.get(n).size();i++)
            {
                int tmp=cin.get(n).get(i);
                if(left.get(Func).containsKey(tmp))
                 {
                 left.get(Func).put(tmp,Math.min(left.get(Func).get(tmp),n));
                 }
                 else
                 {
                 left.get(Func).put(tmp,n);
                 }
                /*
                if(right.get(Func).containsKey(tmp))
                {
                    right.get(Func).put(tmp,Math.max(right.get(Func).get(tmp),n));
                }
                else
                {
                    right.get(Func).put(tmp,n);
                }*/
            }
            for(int i=0;i<cdef.get(n).size();i++)
            {
                int tmp=cdef.get(n).get(i);
                if(left.get(Func).containsKey(tmp))
                {
                    left.get(Func).put(tmp,Math.min(left.get(Func).get(tmp),n));
                }
                else
                {
                    left.get(Func).put(tmp,n);
                }
                if(right.get(Func).containsKey(tmp))
                {
                    right.get(Func).put(tmp,Math.max(right.get(Func).get(tmp),n));
                }
                else
                {
                    right.get(Func).put(tmp,n);
                }
            }
            /*for(int i=0;i<cin.get(n).size();i++)
            {
                int tmp=cin.get(n).get(i);
                if(left.get(Func).containsKey(tmp))
                {
                    left.get(Func).put(tmp,Math.min(left.get(Func).get(tmp),n));
                }
                else
                {
                    left.get(Func).put(tmp,n);
                }
                if(right.get(Func).containsKey(tmp))
                {
                    right.get(Func).put(tmp,Math.max(right.get(Func).get(tmp),n));
                }
                else
                {
                    right.get(Func).put(tmp,n);
                }
            }*/
            n++;
        }
    }
    public void allocate(String Func)
    {
        Vector<String> regs=new Vector<String>();
        Allocs.put(Func,new HashMap<Integer,String> ());
        Spills.put(Func,new HashMap<Integer,Integer> ());
        Vector<Integer> used=new Vector<Integer>();
        for(int i=0;i<=7;i++)
        {
            regs.add("s"+Integer.toString(i));
            used.add(0);
        }
        for(int i=0;i<=9;i++)
        {
            regs.add("t"+Integer.toString(i));
            used.add(0);
        }
        int n=0;int sp=Math.max(args.get(cur_func)-4,0);
        while(def.get(Func).containsKey(n))
        {
            Iterator iter=left.get(Func).entrySet().iterator();
            while(iter.hasNext())
            {
                Map.Entry HashMap_element=(Map.Entry)iter.next();
                int node=(int)HashMap_element.getKey();
                int l=(int)HashMap_element.getValue();
                if(l==n)
                {
                    //Interval becomes Active;
                    boolean fin=false;
                    for(int i=0;i<used.size();i++)
                    {
                        if(used.get(i).equals(0))
                        {
                            /*System.out.println(used.size());
                            System.out.println(i);*/
                            fin=true;
                            used.set(i,1);
                            Allocs.get(Func).put(node,regs.get(i));
                            break;
                        }
                    }
                    if(!fin)
                    {
                        //Spilled
                        Spills.get(Func).put(node,sp);
                        sp++;
                    }
                }
            }
            iter=right.get(Func).entrySet().iterator();
            while(iter.hasNext())
            {
                Map.Entry HashMap_element=(Map.Entry)iter.next();
                int node=(int)HashMap_element.getKey();
                int r=(int)HashMap_element.getValue();
                if(r==n)
                {
                    //Interval becomes Inactive;
                    if(Allocs.get(Func).containsKey(node))
                    {
                        String Str=Allocs.get(Func).get(node);
                        used.set((Str.charAt(0)-'s')*8+(Str.charAt(1)-'0'),0);
                    }
                }
            }
            n++;
        }
        for(int i=4;i<args.get(Func);i++)
        {
            Spills.get(Func).put(i,i-4);
        }
    }
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      Vector<String> v=new Vector<String>();
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
      e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }
   
   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         Vector<String> v=new Vector<String>();
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
       if ( n.present() ){
       labcnt++;
          String Tmp=(String)n.node.accept(this);
       HashMap<Integer,String> Cur_Map=Labels.get(cur_func);
       Cur_Map.put(line+1,Tmp);
       
           HashMap<String,Integer> Curr_Map=RLabels.get(cur_func);
           Curr_Map.put(Tmp,line+1);
           HashMap<String,String> Currr_Map=Labs.get(cur_func);
           Currr_Map.put(Tmp,"L"+Integer.toString(labcnt));
         return (R)Tmp;
       }
       else{
           return null;}
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n) {
   	  cur_func="MAIN";
   	  line=0;
   	  call_cnt=0;
   	  //System.out.println(cur_func);
   	  def.put(cur_func,new HashMap<Integer,Vector<Integer>>());
   	  use.put(cur_func,new HashMap<Integer,Vector<Integer>>());
       in.put(cur_func,new HashMap<Integer,Vector<Integer>>());
       out.put(cur_func,new HashMap<Integer,Vector<Integer>>());
       Labels.put(cur_func,new HashMap<Integer,String>());
       RLabels.put(cur_func,new HashMap<String,Integer>());
       Labs.put(cur_func,new HashMap<String,String>());
       Jumps.put(cur_func,new HashMap<Integer,String>());
       left.put(cur_func,new HashMap<Integer,Integer>());
       right.put(cur_func,new HashMap<Integer,Integer>());
       args.put(cur_func,0);
       HashMap<Integer,Vector<Integer>> Cur_Map=def.get(cur_func);
       Cur_Map.put(line,new Vector<Integer>());
       Cur_Map=use.get(cur_func);
       Cur_Map.put(line,new Vector<Integer>());
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      int overflow=0;
      if(call_cnt>0)
      {
      	 overflow=overflow+10;//t0---t9
      }
      stksp.put(cur_func,overflow);
      n.f3.accept(this);
      n.f4.accept(this);
       Iterator iter4=use.entrySet().iterator();
       while(iter4.hasNext())
       {
           Map.Entry HashMap_element = (Map.Entry)iter4.next();
           String St=(String)HashMap_element.getKey();
           cons(St);
           allocate(St);
       }
    //print();
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n) {
      R _ret=null;
      line=0;
       call_cnt=0;
      cur_func=(String)n.f0.accept(this);
      def.put(cur_func,new HashMap<Integer,Vector<Integer>>());
      use.put(cur_func,new HashMap<Integer,Vector<Integer>>());
       in.put(cur_func,new HashMap<Integer,Vector<Integer>>());
       out.put(cur_func,new HashMap<Integer,Vector<Integer>>());
       Labels.put(cur_func,new HashMap<Integer,String>());
       RLabels.put(cur_func,new HashMap<String,Integer>());
       
       Labs.put(cur_func,new HashMap<String,String>());
       Jumps.put(cur_func,new HashMap<Integer,String>());
       left.put(cur_func,new HashMap<Integer,Integer>());
       right.put(cur_func,new HashMap<Integer,Integer>());
      //System.out.println(cur_func);
      n.f1.accept(this);
      String temp=(String)n.f2.accept(this);
       args.put(cur_func,Integer.parseInt(temp));
       HashMap<Integer,Vector<Integer>> Cur_Map=def.get(cur_func);
       Cur_Map.put(line,new Vector<Integer>());
       for(int i=0;i<Math.min(4,Integer.parseInt(temp));i++)
       {
           Cur_Map.get(line).add(i);
       }
       Cur_Map=use.get(cur_func);
       Cur_Map.put(line,new Vector<Integer>());
      n.f3.accept(this);
      
      n.f4.accept(this);
      int overflow=0;
       overflow=overflow+8;
       if(call_cnt>0)
       {
           overflow=overflow+10;
       }
       stksp.put(cur_func,overflow);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n) {
   	  line++;
   	  HashMap<Integer,Vector<Integer>> Cur_Map=def.get(cur_func);
   	  Cur_Map.put(line,new Vector<Integer>());
   	  Cur_Map=use.get(cur_func);
   	  Cur_Map.put(line,new Vector<Integer>());
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n) {
      line++;
      HashMap<Integer,Vector<Integer>> Cur_Map=def.get(cur_func);
   	  Cur_Map.put(line,new Vector<Integer>());
   	  Cur_Map=use.get(cur_func);
   	  Cur_Map.put(line,new Vector<Integer>());
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n) {
   line++;
   HashMap<Integer,Vector<Integer>> Cur_Map=def.get(cur_func);
   	  Cur_Map.put(line,new Vector<Integer>());
   	  Cur_Map=use.get(cur_func);
   	  Cur_Map.put(line,new Vector<Integer>());
   	  Vector<Integer> v=Cur_Map.get(line);
      R _ret=null;
      n.f0.accept(this);
      int a=Integer.parseInt((String)n.f1.accept(this));
       if(!(a>=4&&a<args.get(cur_func))){
           v.add(a);}
      String Temp=(String)n.f2.accept(this);
       HashMap<Integer,String> Cur=Jumps.get(cur_func);
       Cur.put(line,Temp);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n) {
   line++;
   HashMap<Integer,Vector<Integer>> Cur_Map=def.get(cur_func);
   	  Cur_Map.put(line,new Vector<Integer>());
   	  Cur_Map=use.get(cur_func);
   	  Cur_Map.put(line,new Vector<Integer>());
      R _ret=null;
      n.f0.accept(this);
      String Temp=(String)n.f1.accept(this);
       HashMap<Integer,String> Cur=Jumps.get(cur_func);
       Cur.put(line,Temp);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n) {
       line++;
      R _ret=null;
     HashMap<Integer,Vector<Integer>> Cur_Map=def.get(cur_func);
   	  Cur_Map.put(line,new Vector<Integer>());
   	  Cur_Map=use.get(cur_func);
   	  Cur_Map.put(line,new Vector<Integer>());
   	  Vector<Integer> v=Cur_Map.get(line);
      n.f0.accept(this);
      int a=Integer.parseInt((String)n.f1.accept(this));
      n.f2.accept(this);
      int b=Integer.parseInt((String)n.f3.accept(this));
       if(!(a>=4&&a<args.get(cur_func))){
           v.add(a);}
       if(!(b>=4&&b<args.get(cur_func)))
       {
       v.add(b);
       }
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n) {
   line++;
   HashMap<Integer,Vector<Integer>> Cur_Map=def.get(cur_func);
   	  Cur_Map.put(line,new Vector<Integer>());
   	  Vector<Integer> v1=Cur_Map.get(line);
   	  Cur_Map=use.get(cur_func);
   	  Cur_Map.put(line,new Vector<Integer>());
   	  Vector<Integer> v=Cur_Map.get(line);
      R _ret=null;
      n.f0.accept(this);
      int a=Integer.parseInt((String)n.f1.accept(this));
      int b=Integer.parseInt((String)n.f2.accept(this));
      n.f3.accept(this);
       if(!(a>=4&&a<args.get(cur_func))){
      v1.add(a);
           
       }
       if(!(b>=4&&b<args.get(cur_func))){
      v.add(b);
       }
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n) {
   line++;
   HashMap<Integer,Vector<Integer>> Cur_Map=def.get(cur_func);
   	  Cur_Map.put(line,new Vector<Integer>());
   	  Vector<Integer> v1=Cur_Map.get(line);
   	  Cur_Map=use.get(cur_func);
   	  Cur_Map.put(line,new Vector<Integer>());
      R _ret=null;
      n.f0.accept(this);
      int al=Integer.parseInt((String)n.f1.accept(this));
       if(!(al>=4&&al<args.get(cur_func))){
           v1.add(al);}
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n) {
   line++;
   HashMap<Integer,Vector<Integer>> Cur_Map=def.get(cur_func);
   	  Cur_Map.put(line,new Vector<Integer>());
   	  Cur_Map=use.get(cur_func);
   	  Cur_Map.put(line,new Vector<Integer>());
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
    
   public R visit(StmtExp n) {
     // line++;
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n) {
      R _ret=null;
      iscall=true;
      call_cnt++;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      Vector<Integer> v1=(use.get(cur_func)).get(line);
      for(int i=0;i<call_vec.size();i++)
      {
          int a=Integer.parseInt((String)call_vec.get(i));
          if(!(a>=4&&a<args.get(cur_func)))
          {
      	v1.add(Integer.parseInt((String)call_vec.get(i)));
          }
      }
      n.f4.accept(this);
      iscall=false;
      call_vec=new Vector<String>();
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n) {
      R _ret=null;
      n.f0.accept(this);
      int a=Integer.parseInt((String)n.f1.accept(this));
      n.f2.accept(this);
      Vector<Integer> v=use.get(cur_func).get(line);
       if(!(a>=4&&a<args.get(cur_func))){
           v.add(a);}
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n) {
      R _ret=null;
      R al=n.f0.accept(this);
      if(((int)n.f0.which)==0)
      {
          if(!iscall)
          {
              HashMap<Integer,Vector<Integer>> cur_map=use.get(cur_func);
              Vector<Integer> v=cur_map.get(line);
              int a=Integer.parseInt((String)al);
              if(!(a>=4&&a<args.get(cur_func))){
              v.add(Integer.parseInt((String)al));
              }
          }
      }
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
    
   public R visit(Temp n) {
      R _ret=null;
      n.f0.accept(this);
      _ret=(R)n.f1.accept(this);
      if(iscall)
      {
      	call_vec.add((String)_ret);
      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
    
   public R visit(IntegerLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      _ret=(R)n.f0.toString();
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n) {
      R _ret=null;
      n.f0.accept(this);
      _ret=(R)n.f0.toString();
      return _ret;
   }

}

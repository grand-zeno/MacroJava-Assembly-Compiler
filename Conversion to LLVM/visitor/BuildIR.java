




//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */


public class BuildIR<R,A> implements GJVisitor<R,A> {
    
    
    
    //
    // Auto class visitors--probably don't need to be overridden.
    //
    public static String curclass=new String();
    public static HashMap<String,String> Function_Map;
    public static HashMap<String,String> Var_Map;
    public static Stack<String> Scope_Stack=new Stack<String>();
    public static Vector<String> Class_Vec;
    public static HashMap<String,String> Par;
    public static HashMap<String,Vector<String>> Class_Var;
    public static HashMap<String,Vector<String>> Class_Func;
    public static HashMap<String,Vector<String>> Class_Var_Ordered=new HashMap<String,Vector<String>>();
    public static HashMap<String,Vector<String>> Class_Func_Ordered=new HashMap<String,Vector<String>>();
    public static HashMap<String,String> CurFuncVar=new HashMap<String,String>();
    public static String CurType=new String();
    public static Vector<Integer> reglist=new Vector<Integer>();
   // public static String Code=new String();
    int expreg=0;
    String exptype=new String();
    int cnt=10;
    int lab=0;
    public static String ClassMain=new String();
    String Formal_Param_List="";
    //Utility Functions:
    
    public String Convert_Stack_to_String(Stack<String> V)
    {
        String ret="";
        Iterator iter = V.iterator();
        while(iter.hasNext())
        {
            ret=ret+"/"+iter.next();
        }
        return ret;
    }
    public void Print_Table(HashMap<String,Vector<String>> H)
    {
        Iterator iter4=H.entrySet().iterator();
        while(iter4.hasNext())
        {
            Map.Entry HashMap_element = (Map.Entry)iter4.next();
            String St=(String)HashMap_element.getKey();
            Vector<String> Val=(Vector<String>)HashMap_element.getValue();
            System.out.println(St+":");
            for(int i=0;i<Val.size();i++)
            {
                System.out.println(Val.get(i));
            }
            
        }
    }
    public void Print_Table1(HashMap<String,String> H)
    {
        Iterator iter4=H.entrySet().iterator();
        while(iter4.hasNext())
        {
            Map.Entry HashMap_element = (Map.Entry)iter4.next();
            String St=(String)HashMap_element.getKey();
            String Val=(String)HashMap_element.getValue();
            System.out.println(St+":"+Val);
            
        }
    }
    String check_var_scope(String x)
    {
        String cls=x.split("/",4)[1];
        String func=x.split("/",4)[2];
        String var=x.split("/",4)[3];
        if(Var_Map.containsKey(x))
        {
            return Var_Map.get(x);
        }
        else
        {
            x=("/"+cls+"/"+x.split("/",4)[3]);
            if(Var_Map.containsKey(x))
            {
                String _ret= Var_Map.get(x);
                x=("/"+cls+"/"+func+"/"+var);
                return _ret;
            }
            String Cur=Par.get(cls);
            while(Cur!=null)
            {
                x=("/"+Cur+"/"+x.split("/",3)[2]);
                if(Var_Map.containsKey(x))
                {
                    String _ret= Var_Map.get(x);
                    x=("/"+cls+"/"+func+"/"+var);
                    return _ret;
                }
                Cur=Par.get(Cur);
            }
            x=("/"+cls+"/"+func+"/"+var);
            System.out.println("Symbol not found");//+Convert_Stack_to_String(Scope_Stack)+"/"+var);
            System.exit(0);
        }
        return null;
    }
    String Check_Func_Scope(String x)
    {
        String Func_Par=x.split("/",3)[1];
        String Func_Name=x.split("/",3)[2];
        if(Function_Map.containsKey(x))
        {
            return Function_Map.get(x);
        }
        else
        {
            String Cur=Par.get(Func_Par);
            while(Cur!=null)
            {
                x=("/"+Cur+"/"+Func_Name);
                if(Function_Map.containsKey(x))
                {
                    String _ret=Function_Map.get(x);
                    x=("/"+Func_Par+"/"+Func_Name);
                    return _ret;
                }
                Cur=Par.get(Cur);
            }
            x=("/"+Func_Par+"/"+Func_Name);
            //System.out.println("Symbol not found");//+Convert_Stack_to_String(Scope_Stack)+x);
            //System.exit(0);
        }
        return null;
    }
    
    public R visit(NodeList n, A argu) {
        R _ret=null;
        int _count=0;
        String Str=new String();
        Vector<Integer> V=new Vector<Integer>();
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            Str=Str+(String)e.nextElement().accept(this,argu)+" ";
            V.add(expreg);
            _count++;
        }
        reglist=V;
        _ret=(R)Str;
        return _ret;
    }
    
    public R visit(NodeListOptional n, A argu) {
        if ( n.present() ) {
            R _ret=null;
            int _count=0;
            String Str=new String();
            Vector<Integer> V=new Vector<Integer>();
            for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                Str=Str+(String)e.nextElement().accept(this,argu);
                V.add(expreg);
                _count++;
            }
            reglist=V;
            _ret=(R)Str;
            return _ret;
        }
        else{
            Vector<Integer> V=new Vector<Integer>();
            reglist=V;
            return (R)"";
        }
    }
    
    public R visit(NodeOptional n, A argu) {
        if ( n.present() )
            return n.node.accept(this,argu);
        else
            return (R)"";
    }
    
    public R visit(NodeSequence n, A argu) {
        R _ret=null;
        int _count=0;
        String Str=new String();
        Vector<Integer> V=new Vector<Integer>();
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            Str=Str+(String)e.nextElement().accept(this,argu)+" ";
            V.add(expreg);
            _count++;
        }
        reglist=V;
        _ret=(R)Str;
        return _ret;
    }
    
    public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }
    
    
    
    public BuildIR(HashMap<String,String> Function_Map,HashMap<String,String> Var_Map,Vector<String> Class_Vec,HashMap<String,String> Par,HashMap<String,Vector<String>> h1,HashMap<String,Vector<String>> h2)
    {
        this.Function_Map=Function_Map;
        this.Var_Map=Var_Map;
        this.Class_Vec=Class_Vec;
        this.Par=Par;
        this.Class_Var=h1;
        this.Class_Func=h2;
        this.CurType="";
    }
    
    
    
    //
    // User-generated visitor methods below
    //
    
    /**
     * f0 -> MainClass()
     * f1 -> ( TypeDeclaration() )*
     * f2 -> <EOF>
     */
    
    
    public R visit(Goal n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        //Add Virtual Tables
        //Print_Table1(Var_Map);
        Iterator iter4=Class_Func.entrySet().iterator();
        while(iter4.hasNext())
        {
            Map.Entry HashMap_element = (Map.Entry)iter4.next();
            String St=(String)HashMap_element.getKey();
            Vector<String> Val=(Vector<String>)HashMap_element.getValue();
            Code=Code+"@."+St+"_vtable=global [ "+Integer.toString(Val.size())+" x "+"i8*]"+" [";
            for(int i=0;i<Val.size();i++)
            {
                String t1=Val.get(i);
                String t3=Val.get(i);
                String t6=Val.get(i);
                String t2="/"+t3.split("_",2)[0]+"/"+t1.split("_",2)[1];
                String t4=Function_Map.get(t2);
                String[] t5=t4.split(",",0);
                Code=Code+"i8* bitcast ( ";
                if(t5[0].equals("int"))
                {
                    Code=Code+"i32 ";
                }
                else{
                if(t5[0].equals("boolean"))
                {
                    Code=Code+"i32 ";
                }
                else{
                if(t5[0].equals("int[]"))
                {
                    Code=Code+"i32* ";
                }
                    else
                    {
                        Code=Code+"i32*** ";
                    }
                }
                }
                Code=Code+"( i32***";
                if(t5.length!=1)
                {
                    Code=Code+" , ";
                }
                for(int j=1;j<t5.length;j++)
                {
                    if(t5[j].equals("int"))
                    {
                        Code=Code+"i32 ";
                    }
                    else{
                        if(t5[j].equals("boolean"))
                        {
                            Code=Code+"i32 ";
                        }
                        else{
                            if(t5[j].equals("int[]"))
                            {
                                Code=Code+"i32* ";
                            }
                            else
                            {
                                Code=Code+"i32*** ";
                            }
                        }
                    }
                    if(j+1!=t5.length)
                    {
                        Code=Code+",";
                    }
                }
                
                Code=Code+") *";
                Code=Code+" @"+Val.get(i) +" to i8*)";
                if(i+1!=Val.size())
                {
                    Code=Code+",\n";
                }
            }
            Code=Code+"]\n\n";
            
        }
        
        Code=Code+"@_cint = constant [4 x i8] c\"%d\\0a\\00\"\n";
        Code=Code+"@_cOOB = constant [15 x i8] c\"Out of bounds\\0a\\00\"\n";
        
        Code=Code+"\ndeclare i8* @calloc(i32, i32)\ndeclare i32 @printf(i8*, ...)\ndeclare void @exit(i32)\n\n\ndefine void @print_int(i32 %i) {\n   %_str = bitcast [4 x i8]* @_cint to i8*\ncall i32 (i8*, ...) @printf(i8* %_str, i32 %i)\n   ret void\n}\n\ndefine void @throw_oob() {\n    %_str = bitcast [15 x i8]* @_cOOB to i8*\n   call i32 (i8*, ...) @printf(i8* %_str)\n  call void @exit(i32 1)\n  ret void\n} ";
        Code=Code+"\n\ndefine i32 @main() {\n";
        String temp=(String)n.f0.accept(this, argu);
        if(temp!=null)
        {
            Code=Code+temp;
        }
        Code=Code+"\nret i32 0\n}\n";
        String Temp=(String)n.f1.accept(this, argu);
        if(Temp!=null){
            Code=Code+Temp;
            
        }
        n.f2.accept(this, argu);
        System.out.println(Code);
        return _ret;
    }
    
    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> "public"
     * f4 -> "static"
     * f5 -> "void"
     * f6 -> "main"
     * f7 -> "("
     * f8 -> "String"
     * f9 -> "["
     * f10 -> "]"
     * f11 -> Identifier()
     * f12 -> ")"
     * f13 -> "{"
     * f14 -> PrintStatement()
     * f15 -> "}"
     * f16 -> "}"
     */
    
    
    
    public R visit(MainClass n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        Scope_Stack.push(n.f1.f0.toString());
        curclass=n.f1.f0.toString();
        ClassMain=curclass;
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        n.f10.accept(this, argu);
        n.f11.accept(this, argu);
        n.f12.accept(this, argu);
        n.f13.accept(this, argu);
        Scope_Stack.push("main");
        String temp=(String)n.f14.accept(this, argu);
        if(temp!=null)
        {
            Code=Code+temp;
        }
        n.f15.accept(this, argu);
        Scope_Stack.pop();
        n.f16.accept(this, argu);
        Scope_Stack.pop();
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> ClassDeclaration()
     *       | ClassExtendsDeclaration()
     */
    
    
    
    public R visit(TypeDeclaration n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Temp=(String)n.f0.accept(this, argu);
        _ret=(R)Temp;
        return _ret;
    }
    
    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> ( VarDeclaration() )*
     * f4 -> ( MethodDeclaration() )*
     * f5 -> "}"
     */
    
    
    
    public R visit(ClassDeclaration n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        curclass=n.f1.f0.toString();
        Scope_Stack.push(n.f1.f0.toString());
        n.f3.accept(this, argu);
        String Temp=(String)n.f4.accept(this, argu);
        if(Temp!=null)
        {
            Code=Code+Temp;
        }
        n.f5.accept(this, argu);
        Scope_Stack.pop();
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "extends"
     * f3 -> Identifier()
     * f4 -> "{"
     * f5 -> ( VarDeclaration() )*
     * f6 -> ( MethodDeclaration() )*
     * f7 -> "}"
     */
    
    
    
    public R visit(ClassExtendsDeclaration n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        Scope_Stack.push(n.f1.f0.toString());
        curclass=n.f1.f0.toString();
        n.f5.accept(this, argu);
        String Temp=(String)n.f6.accept(this, argu);
        if(Temp!=null)
        {
            Code=Code+Temp;
        }
        n.f7.accept(this, argu);
        Scope_Stack.pop();
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> Type()
     * f1 -> Identifier()
     * f2 -> ";"
     */
    
    
    
    public R visit(VarDeclaration n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String a=(String)n.f0.accept(this, argu);
        String b=(String)n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        String Temp=b+",";
        _ret=(R)Temp;
        return _ret;
    }
    
    /**
     * f0 -> "public"
     * f1 -> Type()
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( FormalParameterList() )?
     * f5 -> ")"
     * f6 -> "{"
     * f7 -> ( VarDeclaration() )*
     * f8 -> ( Statement() )*
     * f9 -> "return"
     * f10 -> Expression()
     * f11 -> ";"
     * f12 -> "}"
     */
    
    
    public R visit(MethodDeclaration n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        String Func_Sign="";
        n.f0.accept(this, argu);
        Func_Sign=Func_Sign+n.f1.accept(this, argu);
        Func_Sign=Func_Sign+",";
        n.f2.accept(this, argu);
        Scope_Stack.push(n.f2.f0.toString());
        String Func_Name=n.f2.f0.toString();
        String sn=Function_Map.get("/"+curclass+"/"+Func_Name);
        String[] arr1=sn.split(",",0);
        Code=Code+"define ";
        if(arr1[0].equals("int")||arr1[0].equals("boolean"))
        {
            Code=Code+"i32 ";
        }
        else
        {
            if(arr1[0].equals("int[]")){
                Code=Code+"i32* ";}
            else
            {
                Code=Code +"i32*** ";
            }
        }
        Code=Code+"@"+curclass+"_"+Func_Name;
        Code=Code+"( i32*** %_this";
        if(arr1.length!=1)
        {
            Code=Code+",";
        }
        n.f3.accept(this, argu);n.f4.accept(this, argu);
        Func_Sign=Func_Sign+Formal_Param_List;
        String[] arr=Formal_Param_List.split(",",0);
        String t1=new String();;
        if(!arr[0].equals("")){
        for(int i=0;i<arr.length;i++)
        {
            cnt++;
            CurFuncVar.put(arr[i],Integer.toString(cnt));
            if(arr1[i+1].equals("int")||arr1[i+1].equals("boolean"))
            {
                Code=Code+"i32 ";
                t1=t1+"%_"+Integer.toString(cnt)+" = alloca i32\n";
                t1=t1+"store i32 %_."+Integer.toString(cnt)+" , i32* %_"+Integer.toString(cnt)+"\n";
            }
            else
            {
                if(arr1[i+1].equals("int[]")){
                Code=Code+"i32* ";
                t1=t1+"%_"+Integer.toString(cnt)+" = alloca i32*\n";
                t1=t1+"store i32* %_."+Integer.toString(cnt)+" , i32** %_"+Integer.toString(cnt)+"\n";
                }
                else
                {
                    Code=Code+"i32*** ";
                    t1=t1+"%_"+Integer.toString(cnt)+" = alloca i32***\n";
                    t1=t1+"store i32*** %_."+Integer.toString(cnt)+" , i32**** %_"+Integer.toString(cnt)+"\n";
                }
            }
            Code=Code+"%_."+Integer.toString(cnt);
            
            if(i!=arr.length-1)
            {
                Code=Code+", ";
            }
            
        }
        }
        Code=Code+")\n{\n";
        Formal_Param_List="";
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        String Vars=(String)n.f7.accept(this, argu);
        if(Vars!=null&&Vars!=""){
        String[] arr2=Vars.split(",",0);
        for(int i=0;i<arr2.length;i++)
        {
            cnt++;
            CurFuncVar.put(arr2[i],Integer.toString(cnt));
            String Tp=Var_Map.get("/"+curclass+"/"+Func_Name+"/"+arr2[i]);
            if(Tp.equals("int")||Tp.equals("boolean"))
            {
                t1=t1+"%_"+Integer.toString(cnt)+" = alloca i32\n";
                
            }
            else
            {
                if(Tp.equals("int[]")){
                t1=t1+"%_"+Integer.toString(cnt)+" = alloca i32*\n";
                }
                else
                {
                    t1=t1+"%_"+Integer.toString(cnt)+" = alloca i32***\n";
                }
            }
            
        }
        }
        n.f8.accept(this, argu);
        Code=Code+t1;
        String Temp=(String)n.f8.accept(this, argu);;
        if(Temp!=null)
        {
            Code=Code+Temp;
        }
        n.f9.accept(this, argu);
        Code=Code+(String)n.f10.accept(this,argu);
        Code=Code+"ret ";
        if(arr1[0].equals("int")||arr1[0].equals("boolean"))
        {
            Code=Code+" i32 ";
        }
        else
        {
            if(arr1[0].equals("int[]"))
            {
                Code=Code+" i32* ";
            }
            else
            {
                Code=Code+" i32*** ";
            }
        }
        Code=Code+"%_"+Integer.toString(expreg)+"\n";
        n.f11.accept(this, argu);
        n.f12.accept(this, argu);
        Scope_Stack.pop();
        Code=Code+"}\n";
        _ret=(R)Code;
        CurFuncVar.clear();
        return _ret;
    }
    
    /**
     * f0 -> FormalParameter()
     * f1 -> ( FormalParameterRest() )*
     */
    public R visit(FormalParameterList n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String a=(String)n.f0.accept(this, argu);
        String b=(String)n.f1.accept(this, argu);
        return _ret;
    }
    
    /**
     * f0 -> Type()
     * f1 -> Identifier()
     */
    public R visit(FormalParameter n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String a=(String)(n.f0.accept(this, argu));
        String b=(String)n.f1.accept(this, argu);
        _ret=(R)(b+",");
        Formal_Param_List=Formal_Param_List+_ret;
        // System.out.println(Convert_Stack_to_String(Scope_Stack)+"/"+b+":"+a+"\n");
        return _ret;
    }
    
    /**
     * f0 -> ","
     * f1 -> FormalParameter()
     */
    public R visit(FormalParameterRest n, A argu) {
        R _ret=null;
        _ret=(R)"";
        n.f0.accept(this, argu);
        _ret=(R)((String)n.f1.accept(this, argu));
        return _ret;
    }
    
    /**
     * f0 -> ArrayType()
     *       | BooleanType()
     *       | IntegerType()
     *       | Identifier()
     */
    public R visit(Type n, A argu) {
        R _ret=null;
        _ret=(R)"";
        return  n.f0.accept(this, argu);
        
    }
    
    /**
     * f0 -> "int"
     * f1 -> "["
     * f2 -> "]"
     */
    public R visit(ArrayType n, A argu) {
        R _ret=null;
        _ret=(R)"";
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        _ret=(R)"int[]";
        return (R)_ret;
    }
    
    /**
     * f0 -> "boolean"
     */
    public R visit(BooleanType n, A argu) {
        R _ret=null;
        _ret=(R)"";
        n.f0.accept(this, argu);
        _ret=(R)"boolean";
        return (R)_ret;
    }
    
    /**
     * f0 -> "int"
     */
    public R visit(IntegerType n, A argu) {
        R _ret=null;
        _ret=(R)"";
        n.f0.accept(this, argu);
        _ret=(R)"int";
        return (R)_ret;
    }
    
    /**
     * f0 -> Block()
     *       | AssignmentStatement()
     *       | ArrayAssignmentStatement()
     *       | IfStatement()
     *       | WhileStatement()
     *       | PrintStatement()
     */
    public R visit(Statement n, A argu) {
        R _ret=null;
        _ret=(R)"";
        _ret=(R)n.f0.accept(this,argu);
        return _ret;
    }
    
    /**
     * f0 -> "{"
     * f1 -> ( Statement() )*
     * f2 -> "}"
     */
    public R visit(Block n, A argu) {
        R _ret=null;
        _ret=(R)"";
        n.f0.accept(this, argu);
        _ret=(R)n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }
    
    /**
     * f0 -> Identifier()
     * f1 -> "="
     * f2 -> Expression()
     * f3 -> ";"
     */
    public R visit(AssignmentStatement n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        String a=(String)n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String b=(String)n.f2.accept(this, argu);
        Code=Code+b+"\n";
        if(CurFuncVar.get(a)!=null)
        {
            if(CurType.equals("int")||CurType.equals("boolean")){
                Code=Code+"store i32 %_"+Integer.toString(expreg)+", i32* %_"+CurFuncVar.get(a)+"\n";
            }
            else
            {
                if(CurType.equals("int[]")){
                Code=Code+"store i32* %_"+Integer.toString(expreg)+", i32** %_"+CurFuncVar.get(a)+"\n";
                }
                else
                {
                    Code=Code+"store i32*** %_"+Integer.toString(expreg)+", i32**** %_"+CurFuncVar.get(a)+"\n";
                }
            }
        }
        else
        {
            //Class field
            String Curclass=Convert_Stack_to_String(Scope_Stack).split("/",-1)[1];
            Vector<String> V=Class_Var.get(Curclass);
            int index=0;
            for(int i=0;i<V.size();i++)
            {
                if(V.get(i).equals(a))
                {
                    index=i;
                    break;
                
                }
            }
            index++;
            if(CurType.equals("int")||CurType.equals("boolean")){
                cnt++;
                int preg=cnt;
                Code=Code+"%_"+Integer.toString(preg)+"= getelementptr i32** , i32***  %_this , i32 "+Integer.toString(index)+"\n";
                cnt++;
                int tr=cnt;
                Code=Code+"%_"+Integer.toString(tr)+" = load i32** , i32*** %_"+Integer.toString(preg)+"\n";
                cnt++;
                int preg1=cnt;
                Code=Code+"%_"+Integer.toString(preg1)+"= load i32* , i32** %_"+Integer.toString(tr)+"\n";
                Code=Code+"store i32 %_"+Integer.toString(expreg)+", i32* %_"+Integer.toString(preg1)+"\n";
            }
            else
            {
                if(CurType.equals("int[]")){
                    cnt++;
                    int preg=cnt;
                    Code=Code+"%_"+Integer.toString(preg)+"= getelementptr i32** , i32***  %_this , i32 "+Integer.toString(index)+"\n";
                    cnt++;
                    int tr=cnt;
                    Code=Code+"%_"+Integer.toString(tr)+" = load i32** , i32*** %_"+Integer.toString(preg)+"\n";
                    
                    Code=Code+"store i32* %_"+Integer.toString(expreg)+", i32** %_"+Integer.toString(tr)+"\n";
                   }
                else
                {
                    cnt++;
                    int preg=cnt;
                    Code=Code+"%_"+Integer.toString(preg)+"= getelementptr i32** , i32***  %_this , i32 "+Integer.toString(index)+"\n";
                    cnt++;
                    int preg1=cnt;
                    Code=Code+"%_"+Integer.toString(preg1)+" = bitcast i32*** %_"+Integer.toString(expreg)+" to i32**\n";
                    Code=Code+"store i32**%_"+Integer.toString(preg1)+" , i32*** %_"+Integer.toString(preg)+"\n";
                }
            }
            //Code=Code+"HSTORE "+"TEMP 0 "+Integer.toString(4*(index+1))+" "+b+"\n";
        }
        n.f3.accept(this, argu);
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Expression()
     * f3 -> "]"
     * f4 -> "="
     * f5 -> Expression()
     * f6 -> ";"
     */
    public R visit(ArrayAssignmentStatement n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        String a=(String)n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String b=(String)n.f2.accept(this, argu);
        int exp1=expreg;
        n.f3.accept(this, argu);
        String arr_reg=new String();
        if(CurFuncVar.get(a)!=null){
            arr_reg=CurFuncVar.get(a);
            cnt++;
            int reg1=cnt;
            cnt++;
            int reg2=cnt;
            cnt++;
            int reg3=cnt;
            cnt++;
            int reg4=cnt;
            Code=Code+"%_"+Integer.toString(reg4)+" = load i32* , i32** %_"+(arr_reg)+"\n";
            Code=Code+b+"\n";
            n.f4.accept(this, argu);
            String c=(String)n.f5.accept(this, argu);
            Code=Code+c+"\n";
            int exp2=expreg;
            cnt++;
            int reg5=cnt;
            cnt++;
            int reg6=cnt;
            Code=Code+"%_"+Integer.toString(reg6)+" = add i32 1 , %_"+Integer.toString(exp1);
            Code=Code+"%_"+Integer.toString(reg5)+" = getelementptr i32 , i32* %_"+Integer.toString(reg4)+" ,  i32 %_"+Integer.toString(reg6)+"\n";
            Code=Code+"store i32 %_"+Integer.toString(exp2)+" , i32* %_"+Integer.toString(reg5)+"\n";
        }
        else
        {
            cnt++;
            int reg1=cnt;
            int index=0;
            String Curclass=Convert_Stack_to_String(Scope_Stack).split("/",-1)[1];
            Vector<String> V=Class_Var.get(Curclass);
            String Var_Name=a;
            for(int i=0;i<V.size();i++)
            {
                if(V.get(i).equals(Var_Name))
                {
                    index=i;
                    break;
                }
            }
            index++;
            n.f4.accept(this, argu);
            cnt++;
            int reg2=cnt;
            cnt++;
            int reg3=cnt;
            Code=Code+"%_"+Integer.toString(reg1)+" = getelementptr i32** , i32*** %_this , i32 "+Integer.toString(index)+"\n";
            Code=Code+"%_"+Integer.toString(reg2)+" = load i32**, i32*** %_"+Integer.toString(reg1)+"\n";
            Code=Code+"%_"+Integer.toString(reg3)+" = load i32*, i32** %_"+Integer.toString(reg2)+"\n";
            Code=Code+b;
            Code=Code+(String)n.f5.accept(this,argu);
            int exp2=expreg;
            cnt++;
            int reg4=cnt;
            Code=Code+"%_"+Integer.toString(reg4)+" = add i32 1, %_"+Integer.toString(exp1)+"\n";
            cnt++;
            int reg5=cnt;
            Code=Code+"%_"+Integer.toString(reg5)+" = getelementptr i32 , i32* %_"+Integer.toString(reg3)+" , i32 %_"+Integer.toString(reg4)+"\n";
            Code=Code+"store i32 %_"+Integer.toString(exp2)+" , i32* %_"+Integer.toString(reg5)+"\n";
        }
        n.f6.accept(this, argu);
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> IfthenElseStatement()
     *       | IfthenStatement()
     */
    public R visit(IfStatement n, A argu) {
        R _ret=null;
        _ret=(R)"";
        _ret=(R)n.f0.accept(this, argu);
        return _ret;
    }
    
    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public R visit(IfthenStatement n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        Code=Code+(String)n.f2.accept(this, argu);
        lab++;
        int lab1=lab;
        lab++;
        int lab2=lab;
        cnt++;
        Code=Code+"%_"+Integer.toString(cnt)+"= icmp slt i32 0 ,"+" %_"+Integer.toString(expreg)+"\n";
        Code=Code+"br i1 %_"+Integer.toString(cnt)+", label  %L"+Integer.toString(lab1)+", label %L"+Integer.toString(lab2)+"\n";
        Code=Code+"\n br label %L"+Integer.toString(lab1)+"\n L"+Integer.toString(lab1)+":\n";
        int temp_lab=lab;
        lab++;
        n.f3.accept(this, argu);
        Code=Code+(String)n.f4.accept(this, argu);
        Code=Code+"\n br label %L"+Integer.toString(lab2)+"\n "+"L"+Integer.toString(lab2)+":\n";
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     * f5 -> "else"
     * f6 -> Statement()
     */
    public R visit(IfthenElseStatement n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        Code=Code+(String)n.f2.accept(this,argu);
        lab++;
        int lab1=lab;
        lab++;
        int lab2=lab;
        lab++;
        int lab3=lab;
        cnt++;
        Code=Code+"%_"+Integer.toString(cnt)+"= icmp slt i32 0 ,"+" %_"+Integer.toString(expreg)+"\n";
        Code=Code+"br i1 %_"+Integer.toString(cnt)+", label  %L"+Integer.toString(lab1)+", label %L"+Integer.toString(lab2)+"\n";
        n.f3.accept(this, argu);
        Code=Code+"\n br label %L"+Integer.toString(lab1)+"\n L"+Integer.toString(lab1)+":\n";
        Code=Code+(String)n.f4.accept(this, argu);
        Code=Code+"br label %L"+Integer.toString(lab3)+"\n";
        n.f5.accept(this, argu);
        Code=Code+"\n br label %L"+Integer.toString(lab2)+"\n L"+Integer.toString(lab2)+":\n";
        Code=Code+(String)n.f6.accept(this, argu);
        Code=Code+"br label %L"+Integer.toString(lab3)+"\n";
        Code=Code+"\n br label %L"+Integer.toString(lab3)+"\n L"+Integer.toString(lab3)+":\n";
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> "while"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public R visit(WhileStatement n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String Cond=(String)n.f2.accept(this, argu);
        lab++;
        int lab1=lab;
        lab++;
        int lab2=lab;
        lab++;
        int lab3=lab;
        Code=Code+"\n br label %L"+Integer.toString(lab1)+"\n L"+Integer.toString(lab1)+": \n";
        Code=Code+Cond;
        cnt++;int exp=cnt;
        Code=Code+"%_"+Integer.toString(exp)+"= icmp slt i32 0 ,"+" %_"+Integer.toString(expreg)+"\n";
        Code=Code+"br i1 %_"+Integer.toString(exp)+", label  %L"+Integer.toString(lab3)+", label %L"+Integer.toString(lab2)+"\n";
        Code=Code+"\n br label %L"+Integer.toString(lab3)+"\n L"+Integer.toString(lab3)+":\n";
        n.f3.accept(this, argu);
        String Temp=(String)n.f4.accept(this, argu);
        if(Temp!=null)
        {
            Code=Code+Temp;
        }
        Code=Code+"br"+" label %L"+Integer.toString(lab1)+"\n";
        Code=Code+"\n br label %L"+Integer.toString(lab2)+"\n L"+Integer.toString(lab2)+": \n";
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> "System.out.println"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> ";"
     */
    public R visit(PrintStatement n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        //Code=Code+"PRINT ";
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        Code=Code+(String)n.f2.accept(this, argu);
        int reg=expreg;
        Code=Code+"call void (i32) @print_int(i32  "+"%_"+Integer.toString(reg)+" ) \n";
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        //Code=Code+"\n";
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> OrExpression()
     *       | AndExpression()
     *       | CompareExpression()
     *       | neqExpression()
     *       | PlusExpression()
     *       | MinusExpression()
     *       | TimesExpression()
     *       | DivExpression()
     *       | ArrayLookup()
     *       | ArrayLength()
     *       | MessageSend()
     *       | PrimaryExpression()
     */
    public R visit(Expression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        Code=Code+(String)n.f0.accept(this, argu);
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> PrimaryExpression()
     * f1 -> "&&"
     * f2 -> PrimaryExpression()
     */
    public R visit(AndExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        String exp1=(String)n.f0.accept(this, argu);
        int reg1=expreg;
        n.f1.accept(this, argu);
        String exp2=(String)n.f2.accept(this, argu);
        int reg2=expreg;
        //Code=Code+" TIMES "+exp1+" "+exp2+"\n";
        cnt++;
        int reg3=cnt;
        Code=Code+exp1;
        Code=Code+exp2;
        Code=Code+"%_"+Integer.toString(reg3)+"= mul i32 %_"+Integer.toString(reg1)+" , %_"+Integer.toString(reg2)+"\n";
        CurType="boolean";
        expreg=reg3;
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> PrimaryExpression()
     * f1 -> "||"
     * f2 -> PrimaryExpression()
     */
    public R visit(OrExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        String a=(String)n.f0.accept(this, argu);
        int reg1=expreg;
        n.f1.accept(this, argu);
       String b=(String) n.f2.accept(this, argu);
        int reg2=expreg;
        cnt++;
        int reg3=cnt;
        Code=Code+a;
        Code=Code+b;
        Code=Code+"%_"+Integer.toString(reg3)+"= add i32 %_"+Integer.toString(reg1)+" , %_"+Integer.toString(reg2)+"\n";
        CurType="boolean";
        expreg=reg3;
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> PrimaryExpression()
     * f1 -> "<="
     * f2 -> PrimaryExpression()
     */
    public R visit(CompareExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        Code=Code+(String)n.f0.accept(this, argu)+" ";
        int reg1=expreg;
        n.f1.accept(this, argu);
        Code=Code+(String)n.f2.accept(this, argu)+"\n";
        int reg2=expreg;
        cnt++;
        int reg3=cnt;
        cnt++;
        int reg4=cnt;
        lab++;
        int lab1=lab;
        lab++;
        int lab2=lab;
        lab++;
        int lab3=lab;
        cnt++;
        int reg5=cnt;
        Code=Code+"%_"+Integer.toString(reg5)+" = alloca i32 \n";
        
        Code=Code+"%_"+Integer.toString(reg3)+" = icmp sle i32 %_"+Integer.toString(reg1)+", %_"+Integer.toString(reg2)+"\n";
        Code=Code+"br i1 %_"+Integer.toString(reg3)+" , label %L"+Integer.toString(lab1)+" , label %L"+Integer.toString(lab2)+"\n";
        Code=Code+"\n br label %L"+Integer.toString(lab1)+"\n L"+Integer.toString(lab1)+":\n";
        Code=Code+"store i32 1 ,i32* %_"+Integer.toString(reg5)+"\n";
        Code=Code+"br label %L"+Integer.toString(lab3)+"\n";
        Code=Code+"\n br label %L"+Integer.toString(lab2)+"\n L"+Integer.toString(lab2)+":\n";
        Code=Code+"store i32 0 ,i32* %_"+Integer.toString(reg5)+"\n";
        Code=Code+"br label %L"+Integer.toString(lab3)+"\n";
        Code=Code+"\n br label %L"+Integer.toString(lab3)+"\n L"+Integer.toString(lab3)+":\n";
        Code=Code+"%_"+Integer.toString(reg4) +" = load i32 , i32* %_"+Integer.toString(reg5)+"\n";
        expreg=reg4;
        _ret=(R)Code;
        CurType="boolean";
        return _ret;
    }
    
    /**
     * f0 -> PrimaryExpression()
     * f1 -> "!="
     * f2 -> PrimaryExpression()
     */
    public R visit(neqExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        Code=Code+(String)n.f0.accept(this, argu)+" ";
        int reg1=expreg;
        n.f1.accept(this, argu);
        Code=Code+(String)n.f2.accept(this, argu)+"\n";
        int reg2=expreg;
        cnt++;
        int reg3=cnt;
        cnt++;
        int reg4=cnt;
        lab++;
        int lab1=lab;
        lab++;
        int lab2=lab;
        lab++;
        int lab3=lab;
        cnt++;
        int reg5=cnt;
        Code=Code+"%_"+Integer.toString(reg5)+" = alloca i32 \n";
        Code=Code+"%_"+Integer.toString(reg3)+" = icmp ne i32 %_"+Integer.toString(reg1)+", %_"+Integer.toString(reg2)+"\n";
        Code=Code+"br i1 %_"+Integer.toString(reg3)+" , label %L"+Integer.toString(lab1)+" , label %L"+Integer.toString(lab2)+"\n";
        Code=Code+"\n br label %L"+Integer.toString(lab1)+"\n L"+Integer.toString(lab1)+":\n";
        Code=Code+"store i32 1 ,i32* %_"+Integer.toString(reg5)+"\n";
        Code=Code+"br label %L"+Integer.toString(lab3)+"\n";
        Code=Code+"\n br label %L"+Integer.toString(lab2)+"\n L"+Integer.toString(lab2)+":\n";
        Code=Code+"store i32 0 ,i32* %_"+Integer.toString(reg5)+"\n";
        Code=Code+"br label %L"+Integer.toString(lab3)+"\n";
        Code=Code+"\n br label %L"+Integer.toString(lab3)+"\n L"+Integer.toString(lab3)+":\n";
        Code=Code+"%_"+Integer.toString(reg4) +" = load i32 , i32* %_"+Integer.toString(reg5)+"\n";
        expreg=reg4;
        _ret=(R)Code;
        CurType="boolean";
        return _ret;
    }
    
    /**
     * f0 -> PrimaryExpression()
     * f1 -> "+"
     * f2 -> PrimaryExpression()
     */
    public R visit(PlusExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        String a=(String)n.f0.accept(this, argu);
        int reg1=expreg;
        n.f1.accept(this, argu);
        String b=(String) n.f2.accept(this, argu);
        int reg2=expreg;
        cnt++;
        int reg3=cnt;
        Code=Code+a;
        Code=Code+b;
        Code=Code+"%_"+Integer.toString(reg3)+"= add i32 %_"+Integer.toString(reg1)+" , %_"+Integer.toString(reg2)+"\n";
        CurType="int";
        expreg=reg3;
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> PrimaryExpression()
     * f1 -> "-"
     * f2 -> PrimaryExpression()
     */
    public R visit(MinusExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        String a=(String)n.f0.accept(this, argu);
        int reg1=expreg;
        n.f1.accept(this, argu);
        String b=(String) n.f2.accept(this, argu);
        int reg2=expreg;
        cnt++;
        int reg3=cnt;
        Code=Code+a;
        Code=Code+b;
        Code=Code+"%_"+Integer.toString(reg3)+"= sub i32 %_"+Integer.toString(reg1)+" , %_"+Integer.toString(reg2)+"\n";
        CurType="int";
        expreg=reg3;
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> PrimaryExpression()
     * f1 -> "*"
     * f2 -> PrimaryExpression()
     */
    public R visit(TimesExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        String exp1=(String)n.f0.accept(this, argu);
        int reg1=expreg;
        n.f1.accept(this, argu);
        String exp2=(String)n.f2.accept(this, argu);
        int reg2=expreg;
        cnt++;
        int reg3=cnt;
        Code=Code+exp1;
        Code=Code+exp2;
        Code=Code+"%_"+Integer.toString(reg3)+"= mul i32 %_"+Integer.toString(reg1)+" , %_"+Integer.toString(reg2)+"\n";
        CurType="int";
        expreg=reg3;
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> PrimaryExpression()
     * f1 -> "/"
     * f2 -> PrimaryExpression()
     */
    public R visit(DivExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        String exp1=(String)n.f0.accept(this, argu);
        int reg1=expreg;
        n.f1.accept(this, argu);
        String exp2=(String)n.f2.accept(this, argu);
        int reg2=expreg;
        cnt++;
        int reg3=cnt;
        Code=Code+exp1;
        Code=Code+exp2;
        Code=Code+"%_"+Integer.toString(reg3)+"= sdiv i32 %_"+Integer.toString(reg1)+" , %_"+Integer.toString(reg2)+"\n";
        CurType="int";
        expreg=reg3;
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> PrimaryExpression()
     * f1 -> "["
     * f2 -> PrimaryExpression()
     * f3 -> "]"
     */
    public R visit(ArrayLookup n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();int r1,r2;
        String a=(String)n.f0.accept(this, argu);r1=expreg;
        n.f1.accept(this, argu);
        String b=(String)n.f2.accept(this, argu);r2=expreg;
        n.f3.accept(this, argu);
        cnt++;
        int reg1=cnt;
        cnt++;
        int reg2=cnt;
        cnt++;
        int reg3=cnt;
        cnt++;
        int reg4=cnt;
        cnt++;
        int reg5=cnt;
        Code=Code+a;
        Code=Code+b;
        Code=Code+"%_"+Integer.toString(reg2)+" = add i32 1 ,%_"+Integer.toString(r2)+" \n";
        Code=Code+"%_"+Integer.toString(reg1)+" = getelementptr i32 , i32* %_"+Integer.toString(r1)+" , i32 %_"+Integer.toString(reg2)+"\n";
        Code=Code+"%_"+Integer.toString(reg4)+" = load i32 , i32* %_"+Integer.toString(reg1)+"\n";
        expreg=reg4;
        _ret=(R)Code;
        CurType="int";
        return _ret;
    }
    
    /**
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> "length"
     */
    public R visit(ArrayLength n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();int reg1;
        String a=(String)n.f0.accept(this, argu);reg1=expreg;
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        cnt++;
        int reg=cnt;
        Code=Code+a;
        Code=Code+"%_"+Integer.toString(reg)+" = load i32 , i32* %_"+Integer.toString(reg1)+"\n";
        expreg=reg;
        CurType="int";
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( ExpressionList() )?
     * f5 -> ")"
     */
    public R visit(MessageSend n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String exp1=(String)n.f0.accept(this, argu);
        int preg1=expreg;
        String Func_obj=new String();
        String Code=new String();
        Code=Code+exp1;
        for(int i=0;i<CurType.length();i++)
        {
            Func_obj=Func_obj+CurType.charAt(i);
        }
        n.f1.accept(this, argu);
        String Func_Name=(String)n.f2.accept(this, argu);
        String Func_Key="/"+Func_obj+"/"+Func_Name;
        String Func_Sign=Check_Func_Scope(Func_Key);
        String Func_Type=(String)(Func_Sign.split(",",-1)[0]);
        Vector<String> Temp=(Vector<String>)Class_Func.get(Func_obj);
        int index=-1;
        for(int i=0;i<Temp.size();i++)
        {
            if(Temp.get(i).split("_",2)[1].equals(Func_Name))
            {
                index=i;
                break;
            }
        }
        n.f3.accept(this, argu);
        Code=Code+(String)n.f4.accept(this,argu);
        cnt++;
        int reg=cnt;
        Code=Code+"%_"+Integer.toString(reg)+"= bitcast i32*** %_"+Integer.toString(preg1)+" to i8***\n";
        cnt++;
        int reg1=cnt;
        Code=Code+"%_"+Integer.toString(reg1)+" = load i8** , i8*** %_"+Integer.toString(reg)+"\n";
        cnt++;
        int reg2=cnt;
        Code=Code+"%_"+Integer.toString(reg2)+"= getelementptr i8* , i8** %_"+Integer.toString(reg1)+" , i32 "+Integer.toString(index)+"\n";
        cnt++;
        int reg3=cnt;
        Code=Code+"%_"+Integer.toString(reg3)+" = load i8* , i8**  %_"+Integer.toString(reg2)+"\n";
        cnt++;
        int reg4=cnt;
        cnt++;
        int reg5=cnt;
        String tt=new String();tt="%_"+Integer.toString(reg5)+" = call ";
        String Cast_String=new String();
        if(Func_Sign.split(",",0)[0].equals("int")||Func_Sign.split(",",0)[0].equals("boolean"))
        {
            Cast_String=Cast_String+ "i32 ";
            tt=tt+" i32 %_"+Integer.toString(reg4);
        }
        else
        {
            if(Func_Sign.split(",",0)[0].equals("int[]"))
            {
                Cast_String=Cast_String+ "i32* ";
                tt=tt+" i32* %_"+Integer.toString(reg4);
            }
            else
            {
                Cast_String=Cast_String+ "i32*** ";
                tt=tt+" i32*** %_"+Integer.toString(reg4);
            }
        }
        Cast_String=Cast_String+"( i32***";
        tt=tt+"( i32*** %_"+Integer.toString(preg1);
        if(Func_Sign.split(",",0).length!=1)
        {
            Cast_String=Cast_String+",";
            tt=tt+" , ";
        }
        for(int i=1;i<Func_Sign.split(",",0).length;i++)
        {
            if(Func_Sign.split(",",0)[i].equals("int")||Func_Sign.split(",",0)[i].equals("boolean"))
            {
                Cast_String=Cast_String+ "i32 ";
                tt=tt+" i32 %_"+Integer.toString(reglist.get(i-1));
            }
            else
            {
                if(Func_Sign.split(",",0)[i].equals("int[]"))
                {
                    Cast_String=Cast_String+ "i32* ";
                    tt=tt+" i32* %_"+Integer.toString(reglist.get(i-1));
                }
                else
                {
                    Cast_String=Cast_String+ "i32*** ";
                    tt=tt+" i32*** %_"+Integer.toString(reglist.get(i-1));
                }
            }
            if(i!=(Func_Sign.split(",",0).length-1))
            {
                Cast_String=Cast_String+", ";
                tt=tt+",";
            }
        }
        Cast_String=Cast_String+")* ";
        tt=tt+")";
        Code=Code+"%_"+Integer.toString(reg4)+" = bitcast i8*  %_"+Integer.toString(reg3)+" to "+Cast_String+"\n";
        Code=Code+tt+"\n";
        cnt++;
        CurType=Func_Type;
        expreg=reg5;
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> Expression()
     * f1 -> ( ExpressionRest() )*
     */
    public R visit(ExpressionList n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        Code="";
        int rr;
        String t1=(String)n.f0.accept(this, argu)+" ";
        rr=expreg;
        String t2=(String)n.f1.accept(this, argu)+" ";
        if(t1!=null)
        {
           Code=Code+t1+"\n";
        }
        if(t2!=null)
        {
            Code=Code+t2+"\n";
        }
        Vector<Integer> Temp=new Vector<Integer>();
        Temp.add(rr);
        for(int i=0;i<reglist.size();i++)
        {
            Temp.add(reglist.get(i));
        }
        reglist=Temp;
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> ","
     * f1 -> Expression()
     */
    public R visit(ExpressionRest n, A argu) {
        R _ret=null;
        _ret=(R)"";
        n.f0.accept(this, argu);
        String Temp=(String)n.f1.accept(this, argu);
        if(Temp!=null)
        {
            _ret=(R)Temp;
        }
        return _ret;
    }
    
    /**
     * f0 -> IntegerLiteral()
     *       | TrueLiteral()
     *       | FalseLiteral()
     *       | Identifier()
     *       | ThisExpression()
     *       | ArrayAllocationExpression()
     *       | AllocationExpression()
     *       | NotExpression()
     *       | BracketExpression()
     */
    public R visit(PrimaryExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        String Temp=(String)n.f0.accept(this, argu);
        int ch=n.f0.which;
        if(ch==3)
        {
            String Var_Name=Temp;
            if(CurFuncVar.get(Var_Name)!=null){
                String type=(check_var_scope(Convert_Stack_to_String(Scope_Stack)+"/"+Var_Name));CurType=type;
                if(CurType.equals("int")||CurType.equals("boolean"))
                {
                    cnt++;
                    Code=Code+"%_"+Integer.toString(cnt)+" = "+" load i32,i32* %_"+(String)CurFuncVar.get(Var_Name)+"\n";
                    expreg=cnt;
                }
                else
                {
                    if(CurType.equals("int[]"))
                    {
                        cnt++;
                        Code=Code+"%_"+Integer.toString(cnt)+" = "+" load i32* , i32** %_"+(String)CurFuncVar.get(Var_Name)+"\n";
                        expreg=cnt;
                    }
                    else
                    {
                        cnt++;
                        Code=Code+"%_"+Integer.toString(cnt)+" = "+" load i32*** , i32**** %_"+(String)CurFuncVar.get(Var_Name)+"\n";
                        expreg=cnt;
                    }
                }
            }
            else
            {
                int index=0;
                String Curclass=Convert_Stack_to_String(Scope_Stack).split("/",-1)[1];
                Vector<String> V=Class_Var.get(Curclass);
                for(int i=0;i<V.size();i++)
                {
                    if(V.get(i).equals(Var_Name))
                    {
                        index=i;
                        break;
                    }
                }
                index++;
                String type=Var_Map.get("/"+Curclass+"/"+Var_Name);
                if(type.equals("int")||type.equals("boolean"))
                {
                    cnt++;
                    int reg1=cnt;
                    Code=Code+"%_"+Integer.toString(reg1)+" = getelementptr i32** , i32 *** %_this ,i32 "+Integer.toString(index)+"\n";
                    cnt++;
                    int reg7=cnt;
                    Code=Code+"%_"+Integer.toString(reg7)+" = load i32**, i32*** %_"+Integer.toString(reg1)+"\n";
                    cnt++;
                    int reg2=cnt;
                    Code=Code+"%_"+Integer.toString(reg2)+" = load i32*, i32** %_"+Integer.toString(reg7)+"\n";
                    cnt++;
                    int reg3=cnt;
                    Code=Code+"%_"+Integer.toString(reg3)+" = load i32, i32* %_"+Integer.toString(reg2)+"\n";
                    expreg=reg3;
                }
                else
                {
                    if(type.equals("int[]"))
                    {
                        cnt++;
                        int reg1=cnt;
                        Code=Code+"%_"+Integer.toString(reg1)+" = getelementptr i32** , i32 *** %_this ,i32 "+Integer.toString(index)+"\n";
                        cnt++;
                        int reg7=cnt;
                        cnt++;
                        Code=Code+"%_"+Integer.toString(reg7)+" = load i32**, i32*** %_"+Integer.toString(reg1)+"\n";
                        int reg2=cnt;
                        Code=Code+"%_"+Integer.toString(reg2)+" = load i32*, i32** %_"+Integer.toString(reg7)+"\n";
                        expreg=reg2;
                    }
                    else
                    {
                        cnt++;
                        int reg1=cnt;
                        Code=Code+"%_"+Integer.toString(reg1)+" = getelementptr i32** , i32 *** %_this ,i32 "+Integer.toString(index)+"\n";
                        cnt++;
                        int reg7=cnt;
                        cnt++;
                        Code=Code+"%_"+Integer.toString(reg7)+" = load i32**, i32*** %_"+Integer.toString(reg1)+"\n";
                        int reg2=cnt;
                        Code=Code+"%_"+Integer.toString(reg2)+" = bitcast i32** %_"+Integer.toString(reg7)+" to i32***\n";
                        expreg=reg2;
                    }
                }
                CurType=(Var_Map.get("/"+Curclass+"/"+Var_Name));
                
            }
        }
        else
        {
            if(Temp!=null){
                
                Code=Code+Temp;
                
            }
        }
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public R visit(IntegerLiteral n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        n.f0.accept(this, argu);
        cnt++;
        Code=Code+"%_"+Integer.toString(cnt)+"=add i32 "+n.f0.toString()+" , 0\n";
        expreg=cnt;
        _ret=(R)Code;
        CurType="int";
        return _ret;
    }
    
    /**
     * f0 -> "true"
     */
    public R visit(TrueLiteral n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        //Code="1";
        cnt++;
        Code=Code+"%_"+Integer.toString(cnt)+"=add i32 1"+" , 0\n";
        expreg=cnt;
        n.f0.accept(this, argu);
        _ret=(R)Code;
        CurType="boolean";
        return _ret;
    }
    
    /**
     * f0 -> "false"
     */
    public R visit(FalseLiteral n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        cnt++;
        Code=Code+"%_"+Integer.toString(cnt)+"=add i32 0"+" , 0\n";
        expreg=cnt;
        n.f0.accept(this, argu);
        _ret=(R)Code;
        CurType="boolean";
        return _ret;
    }
    
    /**
     * f0 -> <IDENTIFIER>
     */
    public R visit(Identifier n, A argu) {
        R _ret=null;
        _ret=(R)"";
        n.f0.accept(this,argu);
        _ret=(R)n.f0.toString();
        //System.out.println(_ret);
        
        CurType=(String)_ret;
        return _ret;
    }
    
    /**
     * f0 -> "this"
     */
    public R visit(ThisExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        n.f0.accept(this, argu);
        String Code=new String();
        CurType=Convert_Stack_to_String(Scope_Stack).split("/",-1)[1];
        cnt++;
        int reg=cnt;
        Code=Code+"%_"+Integer.toString(reg)+"= getelementptr i32**, i32*** %_this , i32 0\n";
        _ret=(R)Code;
        expreg=reg;
        return _ret;
    }
    
    /**
     * f0 -> "new"
     * f1 -> "int"
     * f2 -> "["
     * f3 -> Expression()
     * f4 -> "]"
     */
    public R visit(ArrayAllocationExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        String a=(String)n.f3.accept(this, argu);
        int reg3=expreg;
        n.f4.accept(this, argu);
        cnt++;
        int reg=cnt;
        cnt++;
        int reg1=cnt;
        cnt++;
        int reg4=cnt;
        Code=Code+a;
        Code=Code+"%_"+Integer.toString(reg1)+" = add i32 1 , %_"+Integer.toString(reg3)+"\n";
        Code=Code+"%_"+Integer.toString(reg4)+" = call i8* @calloc( i32 4 , i32 %_"+Integer.toString(reg1)+")\n";
        Code=Code+"%_"+Integer.toString(reg)+" = bitcast i8* %_"+Integer.toString(reg4)+" to i32* \n";
        Code=Code+"store i32 %_"+Integer.toString(reg3)+" , i32* %_"+Integer.toString(reg)+"\n";
        expreg=reg;
        _ret=(R)Code;
        CurType="int[]";
        return _ret;
    }
    
    /**
     * f0 -> "new"
     * f1 -> Identifier()
     * f2 -> "("
     * f3 -> ")"
     */
    public R visit(AllocationExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        n.f0.accept(this, argu);
        
        
        String a=(String)n.f1.accept(this, argu);
        int num_vars=0;
        if(Class_Var.get(a)!=null)
        {
            num_vars=Class_Var.get(a).size();
        }
        int num_funcs=0;
        if(Class_Func.get(a)!=null)
        {
            num_funcs=Class_Func.get(a).size();
        }
        cnt++;
        int reg=cnt;
        Code=Code+"%_"+Integer.toString(reg)+" = call i8* @calloc (i32 4, i32 "+Integer.toString(4*num_vars+2)+")\n";
        cnt++;
        int reg1=cnt;
        Code=Code+"%_"+Integer.toString(reg1)+" = bitcast i8* %_"+Integer.toString(reg )+" to i32 ***\n";
        for(int i=1;i<=num_vars;i++)
        {
            cnt++;
            int treg=cnt;
            Code=Code+"%_"+Integer.toString(treg)+" = call i8* @calloc ( i32 4, i32 8)\n ";
            cnt++;
            int treg1=cnt;
            Code=Code+"%_"+Integer.toString(treg1)+" = getelementptr i32** , i32*** %_"+Integer.toString(reg1)+" , i32 "+Integer.toString(i)+"\n";
            cnt++;
            int treg2=cnt;
            Code=Code+"%_"+Integer.toString(treg2)+" = bitcast i8* %_"+Integer.toString(treg)+" to i32**\n";
            Code=Code+"store i32** %_"+Integer.toString(treg2)+" , i32*** %_"+Integer.toString(treg1)+"\n";
            cnt++;
            int treg3=cnt;
            Code=Code+"%_"+Integer.toString(treg3)+" = call i8* @calloc ( i32 4, i32 8)\n ";
            cnt++;
            int treg4=cnt;
            Code=Code+"%_"+Integer.toString(treg4)+" = bitcast i8* %_"+Integer.toString(treg3)+" to i32*\n";
            Code=Code+"store i32* %_"+Integer.toString(treg4)+" , i32** %_"+Integer.toString(treg2)+"\n";
        }
        if(!a.equals(ClassMain)){
        cnt++;
        int reg2=cnt;
        Code=Code+"%_"+Integer.toString(reg2)+" = getelementptr [ "+Integer.toString(num_funcs)+" x i8*] , [ "+Integer.toString(num_funcs)+" x i8*]* "+"@."+a+"_vtable ,i32 0 , i32 0\n";
        cnt++;
        int reg3=cnt;
        Code=Code+"%_"+Integer.toString(reg3)+"= bitcast i8** %_"+Integer.toString(reg2)+" to i32 **\n";
        Code=Code+"store i32** %_"+Integer.toString(reg3)+" , i32*** %_"+Integer.toString(reg1);
            Code=Code+"\n";}
        expreg=reg1;
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        _ret=(R)Code;
        CurType=a;
        return _ret;
    }
    
    /**
     * f0 -> "!"
     * f1 -> Expression()
     */
    public R visit(NotExpression n, A argu) {
        
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        n.f0.accept(this,argu);
        Code=Code+(String)n.f1.accept(this, argu)+"\n";
        int reg1=expreg;
        cnt++;
        int reg3=cnt;
        cnt++;
        int reg4=cnt;
        lab++;
        int lab1=lab;
        lab++;
        int lab2=lab;
        lab++;
        int lab3=lab;
        cnt++;
        int reg5=cnt;
        Code=Code+"%_"+Integer.toString(reg5)+" = alloca i32 \n";
        
        Code=Code+"%_"+Integer.toString(reg3)+" = icmp sle i32 %_"+Integer.toString(reg1)+", 0"+"\n";
        Code=Code+"br i1 %_"+Integer.toString(reg3)+" , label %L"+Integer.toString(lab1)+" , label %L"+Integer.toString(lab2)+"\n";
        Code=Code+"\n br label %L"+Integer.toString(lab1)+"\n L"+Integer.toString(lab1)+":\n";
        Code=Code+"store i32 1 ,i32* %_"+Integer.toString(reg5)+"\n";
        Code=Code+"br label %L"+Integer.toString(lab3)+"\n";
        Code=Code+"\n br label %L"+Integer.toString(lab2)+"\n L"+Integer.toString(lab2)+":\n";
        Code=Code+"store i32 0 ,i32* %_"+Integer.toString(reg5)+"\n";
        Code=Code+"br label %L"+Integer.toString(lab3)+"\n";
        Code=Code+"\n br label %L"+Integer.toString(lab3)+"\n L"+Integer.toString(lab3)+":\n";
        Code=Code+"%_"+Integer.toString(reg4) +" = load i32 , i32* %_"+Integer.toString(reg5)+"\n";
        expreg=reg4;
        _ret=(R)Code;
        CurType="boolean";
        return _ret;
    }
    
    /**
     * f0 -> "("
     * f1 -> Expression()
     * f2 -> ")"
     */
    public R visit(BracketExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        n.f0.accept(this, argu);
        Code=Code+(String)n.f1.accept(this, argu)+"\n";
        expreg=expreg;
        n.f2.accept(this, argu);
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> Identifier()
     * f1 -> ( IdentifierRest() )*
     */
    public R visit(IdentifierList n, A argu) {
        R _ret=null;
        _ret=(R)"";
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }
    
    /**
     * f0 -> ","
     * f1 -> Identifier()
     */
    public R visit(IdentifierRest n, A argu) {
        R _ret=null;
        _ret=(R)"";
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }
    
}


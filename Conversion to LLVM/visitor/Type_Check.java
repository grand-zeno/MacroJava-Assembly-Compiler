//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class Type_Check<R,A> implements GJVisitor<R,A> {


	public static HashMap<String,String> Function_Map;
    public static HashMap<String,String> Var_Map;
    public static Stack<String> Scope_Stack=new Stack<String>();
    public static Vector<String> Class_Vec;
    public static HashMap<String,String> Par;
    String Function_Call_Params="";
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   
   
    boolean Check_Ancestor(String a,String b)
    {
        while(b!=null)
        {
            if(b.equals(a))
            {
                return true;
            }
            b=Par.get(b);
        }
        return false;
    }
    String check_var_scope(String x)
    {
        String cls=x.split("/",4)[1];
        String func=x.split("/",4)[2];
        String var=x.split("/",4)[3];
        if(Var_Map.containsKey(x))
        {
            return Var_Map.get(x);
        }
        else
        {
            x=("/"+cls+"/"+x.split("/",4)[3]);
            if(Var_Map.containsKey(x))
            {
                String _ret= Var_Map.get(x);
                x=("/"+cls+"/"+func+"/"+var);
                return _ret;
            }
            String Cur=Par.get(cls);
            while(Cur!=null)
            {
                x=("/"+Cur+"/"+x.split("/",3)[2]);
                if(Var_Map.containsKey(x))
                {
                    String _ret= Var_Map.get(x);
                    x=("/"+cls+"/"+func+"/"+var);
                    return _ret;
                }
                Cur=Par.get(Cur);
            }
            x=("/"+cls+"/"+func+"/"+var);
           System.out.println("Symbol not found");//+Convert_Stack_to_String(Scope_Stack)+"/"+var);
            System.exit(0);
        }
        return null;
    }
    
    String Check_Func_Scope(String x)
	{
		String Func_Par=x.split("/",3)[1];
		String Func_Name=x.split("/",3)[2];
		if(Function_Map.containsKey(x))
		{
			return Function_Map.get(x);
		}
		else
		{
			String Cur=Par.get(Func_Par);
			while(Cur!=null)
			{
				x=("/"+Cur+"/"+Func_Name);
				if(Function_Map.containsKey(x))
				{
					String _ret=Function_Map.get(x);
					x=("/"+Func_Par+"/"+Func_Name);
					return _ret;
				}
				Cur=Par.get(Cur);
			}
			x=("/"+Func_Par+"/"+Func_Name);
           System.out.println("Symbol not found");//+Convert_Stack_to_String(Scope_Stack)+x);
			System.exit(0);
		}
		return null;
	}
    
    
    public String Convert_Stack_to_String(Stack<String> V)
    {
        String ret="";
        Iterator iter = V.iterator();
        while(iter.hasNext())
        {
            ret=ret+"/"+iter.next();
        }
        return ret;
    }
    
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }


   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }
   public R visit(NodeToken n, A argu) { return null; }
   
   
   //Class Constructor
   
   public Type_Check(HashMap<String,String> Function_Map,HashMap<String,String> Var_Map,Vector<String> Class_Vec,HashMap<String,String> Par)
   {
   		this.Function_Map=Function_Map;
   		this.Var_Map=Var_Map;
   		this.Class_Vec=Class_Vec;
   		this.Par=Par;
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
       Scope_Stack.push((String)n.f1.f0.toString());
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
       Scope_Stack.push("main");
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
       Scope_Stack.pop();
      n.f16.accept(this, argu);
       Scope_Stack.pop();
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
        Scope_Stack.push((String)n.f1.f0.toString());
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
        Scope_Stack.pop();
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
       Scope_Stack.push((String)n.f1.f0.toString());
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
       Scope_Stack.pop();
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
       Scope_Stack.push((String)n.f2.f0.toString());
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String r=(String)n.f10.accept(this, argu);
      String a=Function_Map.get(Convert_Stack_to_String(Scope_Stack)).split(",",-1)[0];
      if(!(a).equals(r))
       {
           if(a.equals("int")||a.equals("boolean")||a.equals("int[]")||r.equals("int")||r.equals("boolean")||r.equals("int[]")){
               System.out.println("Type error");
               System.exit(0);}
           else
           {
               if(Check_Ancestor(a,r))
               {
                   
               }
               else
               {
                   System.out.println("Type error");
                   System.exit(0);
               }
           }
       }
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
       Scope_Stack.pop();
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
       _ret=(R)"int[]";
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
       _ret=(R)"boolean";
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
       _ret=(R)((String)"int");
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
       String l,r;
      l=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      r=(String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
       String a=check_var_scope(Convert_Stack_to_String(Scope_Stack)+"/"+l);
       if(!(a).equals(r))
       {
           if(a.equals("int")||a.equals("boolean")||a.equals("int[]")||r.equals("int")||r.equals("boolean")||r.equals("int[]")){
               System.out.println("Type error");
               System.exit(0);}
           else
           {
               if(Check_Ancestor(a,r))
               {
                   
               }
               else
               {
                   System.out.println("Type error");
                   System.exit(0);
               }
           }
       }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu); if(!(check_var_scope(Convert_Stack_to_String(Scope_Stack)+"/"+n.f0.f0.toString())).equals("int[]"))
       {
           System.out.println("Type error");//+Convert_Stack_to_String(Scope_Stack));
           System.exit(0);
       }
      n.f1.accept(this, argu);
      String a=(String)n.f2.accept(this, argu);
       if(!a.equals("int"))
       {
           System.out.println("Type error");//+Convert_Stack_to_String(Scope_Stack));
           System.exit(0);
       }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
       String b=(String)n.f5.accept(this, argu);
       if(!b.equals("int"))
       {
           //System.out.println(b);
           System.out.println("Type error");//+Convert_Stack_to_String(Scope_Stack));
           System.exit(0);
       }
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String a=(String)n.f2.accept(this, argu);
       if(!a.equals("boolean"))
       {
           System.out.println("Type error");//+Convert_Stack_to_String(Scope_Stack));
           System.exit(0);
       }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
       String a=(String)n.f2.accept(this, argu);
       if(!a.equals("boolean"))
       {
           System.out.println("Type error");//+Convert_Stack_to_String(Scope_Stack));
           System.exit(0);
       }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
       String a=(String)n.f2.accept(this, argu);
       if(!a.equals("boolean"))
       {
           System.out.println("Type error");//+Convert_Stack_to_String(Scope_Stack));
           System.exit(0);
       }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
       String a=(String)n.f2.accept(this, argu);
       if(!a.equals("int"))
       {
           
           System.out.println("Type error");//+a+Convert_Stack_to_String(Scope_Stack));
           System.exit(0);
       }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      _ret=(R)n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      String a=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String b=(String)n.f2.accept(this, argu);
       if(!a.equals("boolean")||!b.equals("boolean"))
       {
           System.out.println("Type error");
           System.exit(0);
       }
       _ret=(R)"boolean";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
       R _ret=null;
       String a=(String)n.f0.accept(this, argu);
       n.f1.accept(this, argu);
       String b=(String)n.f2.accept(this, argu);
       if(!a.equals("boolean")||!b.equals("boolean"))
       {
           System.out.println("Type error");
           System.exit(0);
       }
       _ret=(R)"boolean";
       return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
       R _ret=null;
       String a=(String)n.f0.accept(this, argu);
       n.f1.accept(this, argu);
       String b=(String)n.f2.accept(this, argu);
       if(!a.equals("int")||!b.equals("int"))
       {
           System.out.println("Type error");
           System.exit(0);
       }
       _ret=(R)"boolean";
       return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
       R _ret=null;
       String a=(String)n.f0.accept(this, argu);
       n.f1.accept(this, argu);
       String b=(String)n.f2.accept(this, argu);
      /*if(!a.equals(b))
      {
          System.out.println("Type error");
          System.exit(0);
      } if(((!a.equals("boolean"))&&(!a.equals("int")))||((!b.equals("boolean"))&&(!b.equals("int"))))
       {
           System.out.println("Type error");
           System.exit(0);
       }*/
       if(!a.equals("int")&&!b.equals("int")&&!a.equals("boolean")&&!b.equals("boolean")&&!a.equals("int[]")&&!b.equals("int[]"))
       {
       		if(Check_Ancestor(a,b)||Check_Ancestor(b,a))
       		{
       			
       		}
       		else
       		{
       			System.out.println("Type error");
       			System.exit(0);
       		}
       }
       else
       {
       		if(a.equals(b)&&!a.equals("int[]")&&!b.equals("int[]"))
       		{
       		
       		}
       		else
       		{
       			System.out.println("Type error");
       			System.exit(0);
       		}
       }
       
       _ret=(R)"boolean";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
       R _ret=null;
       String a=(String)n.f0.accept(this, argu);
       n.f1.accept(this, argu);
       String b=(String)n.f2.accept(this, argu);
       if(!a.equals("int")||!b.equals("int"))
       {
           System.out.println("Type error");
           System.exit(0);
       }
       _ret=(R)"int";
       return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
       R _ret=null;
       String a=(String)n.f0.accept(this, argu);
       n.f1.accept(this, argu);
       String b=(String)n.f2.accept(this, argu);
       if(!a.equals("int")||!b.equals("int"))
       {
           System.out.println("Type error");
           System.exit(0);
       }
       _ret=(R)"int";
       return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
       R _ret=null;
       String a=(String)n.f0.accept(this, argu);
       n.f1.accept(this, argu);
       String b=(String)n.f2.accept(this, argu);
       if(!a.equals("int")||!b.equals("int"))
       {
           System.out.println("Type error");
           System.exit(0);
       }
       _ret=(R)"int";
       return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
       R _ret=null;
       String a=(String)n.f0.accept(this, argu);
       n.f1.accept(this, argu);
       String b=(String)n.f2.accept(this, argu);
       if(!a.equals("int")||!b.equals("int"))
       {
           System.out.println("Type error");
           System.exit(0);
       }
       _ret=(R)"int";
       return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
       R _ret=null;
       String a=(String)n.f0.accept(this, argu);
       n.f1.accept(this, argu);
       String b=(String)n.f2.accept(this, argu);
       if(!a.equals("int[]")||!b.equals("int"))
       {
           System.out.println("Type error");
           System.exit(0);
       }
       _ret=(R)"int";
       n.f3.accept(this,argu);
       return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
       R _ret=null;
       String a=(String)n.f0.accept(this, argu);
       n.f1.accept(this, argu);
       n.f2.accept(this, argu);
       if(!a.equals("int[]"))
       {
           System.out.println("Type error");
           System.exit(0);
       }
       _ret=(R)"int";
       return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
     //  System.out.println("Hi");
      R _ret=null;
      String Func_Par=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
       // System.out.println("Hi"+"hi");
      String Func_Name=(String)n.f2.accept(this, argu);
      String Func_Key="/"+Func_Par+"/"+Func_Name;
      String Func_Sign=Check_Func_Scope(Func_Key);
      _ret=(R)(Func_Sign.split(",",-1)[0]);
      n.f3.accept(this, argu);
       n.f4.accept(this, argu);
       String Exp_list=Function_Call_Params;
      String[] arg_types=(Func_Sign).split(",",-1);
      String[] exp_types=(Exp_list).split(",",-1);
      if(arg_types.length!=(exp_types.length+1))
      {
          System.out.println("Type error");//+Convert_Stack_to_String(Scope_Stack)+Func_Name);
      	System.exit(0);
      }
      for(int i=1;i<arg_types.length;i++)
      {
      	if(!arg_types[i].equals(exp_types[i-1]))
      	{
            if(arg_types[i].equals("int")||arg_types[i].equals("boolean")||arg_types[i].equals("int[]")||exp_types[i-1].equals("int")||exp_types[i-1].equals("boolean")||exp_types[i-1].equals("int[]")){
            System.out.println("Type error");
                System.exit(0);}
            else
            {
                if(Check_Ancestor(arg_types[i],exp_types[i-1]))
                {
                    
                }
                else
                {
                    System.out.println("Type error");
                    System.exit(0);
                }
            }
      	}
      }
      Function_Call_Params="";
      n.f5.accept(this, argu);
//System.out.println("Hi"+"hi");
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      String Cur=(String)n.f0.accept(this, argu);
      Function_Call_Params=Function_Call_Params+Cur+",";
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String Cur=(String)n.f1.accept(this, argu);
      Function_Call_Params=Function_Call_Params+Cur+",";
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
       
      R _ret=null;
      _ret=(R)n.f0.accept(this, argu);
      int ch=n.f0.which;
      if(ch==3)
      {
      		String type=(check_var_scope(Convert_Stack_to_String(Scope_Stack)+"/"+_ret));
      		if(type==null)
      		{
      			System.out.println("Symbol not found");
      			System.exit(0);
      		}
      		else
      		{
      			_ret=(R)type;
      		}
      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
       _ret=(R)"int";
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
       _ret=(R)"boolean";
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
       _ret=(R)"boolean";
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
       _ret=(R)n.f0.toString();
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
       Iterator iter = Scope_Stack.iterator();
       _ret=(R) iter.next();
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String a=(String)n.f3.accept(this, argu);
       if(!a.equals("int"))
       {
           System.out.println("Type error");
           System.exit(0);
       }
      n.f4.accept(this, argu);
       _ret=(R)"int[]";
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String a=(String)n.f1.accept(this, argu);
       if(!Class_Vec.contains(a))
       {
           System.out.println("Type error");//+Convert_Stack_to_String(Scope_Stack));
           System.exit(0);
       }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
       _ret=(R)a;
       
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String cur_type=(String)n.f1.accept(this, argu);
       if(!cur_type.equals("boolean"))
       {
           System.out.println("Type error");
           System.exit(0);
       }
       else{
           _ret=(R)"boolean";
       }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=(R)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      _ret=(R)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}


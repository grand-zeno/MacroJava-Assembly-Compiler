




//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */


public class BuildIR<R,A> implements GJVisitor<R,A> {
    
    
    
    //
    // Auto class visitors--probably don't need to be overridden.
    //
    
    public static HashMap<String,String> Function_Map;
    public static HashMap<String,String> Var_Map;
    public static Stack<String> Scope_Stack=new Stack<String>();
    public static Vector<String> Class_Vec;
    public static HashMap<String,String> Par;
    public static HashMap<String,Vector<String>> Class_Var;
    public static HashMap<String,Vector<String>> Class_Func;
    public static HashMap<String,Vector<String>> Class_Var_Ordered=new HashMap<String,Vector<String>>();
    public static HashMap<String,Vector<String>> Class_Func_Ordered=new HashMap<String,Vector<String>>();
    public static HashMap<String,String> CurFuncVar=new HashMap<String,String>();
    public static String CurType=new String();
   // public static String Code=new String();
    int cnt=10;
    int lab=0;
    String Formal_Param_List="";
    //Utility Functions:
    
    public String Convert_Stack_to_String(Stack<String> V)
    {
        String ret="";
        Iterator iter = V.iterator();
        while(iter.hasNext())
        {
            ret=ret+"/"+iter.next();
        }
        return ret;
    }
    public void Print_Table(HashMap<String,Vector<String>> H)
    {
        Iterator iter4=H.entrySet().iterator();
        while(iter4.hasNext())
        {
            Map.Entry HashMap_element = (Map.Entry)iter4.next();
            String St=(String)HashMap_element.getKey();
            Vector<String> Val=(Vector<String>)HashMap_element.getValue();
            System.out.println(St+":");
            for(int i=0;i<Val.size();i++)
            {
                System.out.println(Val.get(i));
            }
            
        }
    }
    public void Print_Table1(HashMap<String,String> H)
    {
        Iterator iter4=H.entrySet().iterator();
        while(iter4.hasNext())
        {
            Map.Entry HashMap_element = (Map.Entry)iter4.next();
            String St=(String)HashMap_element.getKey();
            String Val=(String)HashMap_element.getValue();
            System.out.println(St+":"+Val);
            
        }
    }
    String check_var_scope(String x)
    {
        String cls=x.split("/",4)[1];
        String func=x.split("/",4)[2];
        String var=x.split("/",4)[3];
        if(Var_Map.containsKey(x))
        {
            return Var_Map.get(x);
        }
        else
        {
            x=("/"+cls+"/"+x.split("/",4)[3]);
            if(Var_Map.containsKey(x))
            {
                String _ret= Var_Map.get(x);
                x=("/"+cls+"/"+func+"/"+var);
                return _ret;
            }
            String Cur=Par.get(cls);
            while(Cur!=null)
            {
                x=("/"+Cur+"/"+x.split("/",3)[2]);
                if(Var_Map.containsKey(x))
                {
                    String _ret= Var_Map.get(x);
                    x=("/"+cls+"/"+func+"/"+var);
                    return _ret;
                }
                Cur=Par.get(Cur);
            }
            x=("/"+cls+"/"+func+"/"+var);
            System.out.println("Symbol not found");//+Convert_Stack_to_String(Scope_Stack)+"/"+var);
            System.exit(0);
        }
        return null;
    }
    String Check_Func_Scope(String x)
    {
        String Func_Par=x.split("/",3)[1];
        String Func_Name=x.split("/",3)[2];
        if(Function_Map.containsKey(x))
        {
            return Function_Map.get(x);
        }
        else
        {
            String Cur=Par.get(Func_Par);
            while(Cur!=null)
            {
                x=("/"+Cur+"/"+Func_Name);
                if(Function_Map.containsKey(x))
                {
                    String _ret=Function_Map.get(x);
                    x=("/"+Func_Par+"/"+Func_Name);
                    return _ret;
                }
                Cur=Par.get(Cur);
            }
            x=("/"+Func_Par+"/"+Func_Name);
            //System.out.println("Symbol not found");//+Convert_Stack_to_String(Scope_Stack)+x);
            //System.exit(0);
        }
        return null;
    }
    
    public R visit(NodeList n, A argu) {
        R _ret=null;
        int _count=0;
        String Str=new String();
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            Str=Str+(String)e.nextElement().accept(this,argu)+" ";
            _count++;
        }
        _ret=(R)Str;
        return _ret;
    }
    
    public R visit(NodeListOptional n, A argu) {
        if ( n.present() ) {
            R _ret=null;
            int _count=0;
            String Str=new String();
            for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                Str=Str+(String)e.nextElement().accept(this,argu);
                _count++;
            }
            _ret=(R)Str;
            return _ret;
        }
        else
            return (R)"";
    }
    
    public R visit(NodeOptional n, A argu) {
        if ( n.present() )
            return n.node.accept(this,argu);
        else
            return (R)"";
    }
    
    public R visit(NodeSequence n, A argu) {
        R _ret=null;
        int _count=0;
        String Str=new String();
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            Str=Str+(String)e.nextElement().accept(this,argu)+" ";
            _count++;
        }
        _ret=(R)Str;
        return _ret;
    }
    
    public R visit(NodeToken n, A argu) { return null; }
    
    
    
    public BuildIR(HashMap<String,String> Function_Map,HashMap<String,String> Var_Map,Vector<String> Class_Vec,HashMap<String,String> Par,HashMap<String,Vector<String>> h1,HashMap<String,Vector<String>> h2)
    {
        this.Function_Map=Function_Map;
        this.Var_Map=Var_Map;
        this.Class_Vec=Class_Vec;
        this.Par=Par;
        this.Class_Var=h1;
        this.Class_Func=h2;
        this.CurType="";
    }
    
    
    
    //
    // User-generated visitor methods below
    //
    
    /**
     * f0 -> MainClass()
     * f1 -> ( TypeDeclaration() )*
     * f2 -> <EOF>
     */
    
    
    public R visit(Goal n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        Code=Code+"MAIN\n";
        String temp=(String)n.f0.accept(this, argu);
        if(temp!=null)
        {
            Code=Code+temp;
        }
        Code=Code+"END\n";
        String Temp=(String)n.f1.accept(this, argu);
        if(Temp!=null){
            Code=Code+Temp;}
        n.f2.accept(this, argu);
        System.out.println(Code);
        return _ret;
    }
    
    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> "public"
     * f4 -> "static"
     * f5 -> "void"
     * f6 -> "main"
     * f7 -> "("
     * f8 -> "String"
     * f9 -> "["
     * f10 -> "]"
     * f11 -> Identifier()
     * f12 -> ")"
     * f13 -> "{"
     * f14 -> PrintStatement()
     * f15 -> "}"
     * f16 -> "}"
     */
    
    
    
    public R visit(MainClass n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        Scope_Stack.push(n.f1.f0.toString());
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        n.f10.accept(this, argu);
        n.f11.accept(this, argu);
        n.f12.accept(this, argu);
        n.f13.accept(this, argu);
        Scope_Stack.push("main");
        String temp=(String)n.f14.accept(this, argu);
        if(temp!=null)
        {
            Code=Code+temp;
        }
        n.f15.accept(this, argu);
        Scope_Stack.pop();
        n.f16.accept(this, argu);
        Scope_Stack.pop();
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> ClassDeclaration()
     *       | ClassExtendsDeclaration()
     */
    
    
    
    public R visit(TypeDeclaration n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Temp=(String)n.f0.accept(this, argu);
        _ret=(R)Temp;
        return _ret;
    }
    
    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> ( VarDeclaration() )*
     * f4 -> ( MethodDeclaration() )*
     * f5 -> "}"
     */
    
    
    
    public R visit(ClassDeclaration n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        Scope_Stack.push(n.f1.f0.toString());
        n.f3.accept(this, argu);
        String Temp=(String)n.f4.accept(this, argu);
        if(Temp!=null)
        {
            Code=Code+Temp;
        }
        n.f5.accept(this, argu);
        Scope_Stack.pop();
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "extends"
     * f3 -> Identifier()
     * f4 -> "{"
     * f5 -> ( VarDeclaration() )*
     * f6 -> ( MethodDeclaration() )*
     * f7 -> "}"
     */
    
    
    
    public R visit(ClassExtendsDeclaration n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        Scope_Stack.push(n.f1.f0.toString());
        
        n.f5.accept(this, argu);
        String Temp=(String)n.f6.accept(this, argu);
        if(Temp!=null)
        {
            Code=Code+Temp;
        }
        n.f7.accept(this, argu);
        Scope_Stack.pop();
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> Type()
     * f1 -> Identifier()
     * f2 -> ";"
     */
    
    
    
    public R visit(VarDeclaration n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String a=(String)n.f0.accept(this, argu);
        String b=(String)n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        String Temp=b+",";
        _ret=(R)Temp;
        return _ret;
    }
    
    /**
     * f0 -> "public"
     * f1 -> Type()
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( FormalParameterList() )?
     * f5 -> ")"
     * f6 -> "{"
     * f7 -> ( VarDeclaration() )*
     * f8 -> ( Statement() )*
     * f9 -> "return"
     * f10 -> Expression()
     * f11 -> ";"
     * f12 -> "}"
     */
    
    
    public R visit(MethodDeclaration n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        String Func_Sign="";
        n.f0.accept(this, argu);
        Func_Sign=Func_Sign+n.f1.accept(this, argu);
        Func_Sign=Func_Sign+",";
        n.f2.accept(this, argu);
        Scope_Stack.push(n.f2.f0.toString());
        String Func_Name=n.f2.f0.toString();
        Code=Code+Convert_Stack_to_String(Scope_Stack).split("/",3)[1]+"_"+Func_Name;
        n.f3.accept(this, argu);
        String b=(String)n.f4.accept(this, argu);
        Func_Sign=Func_Sign+Formal_Param_List;
        Code=Code+" ["+Integer.toString(Formal_Param_List.split(",",-1).length)+"]\n";
        Code=Code+"BEGIN\n";
        String[] arr=Formal_Param_List.split(",",-1);
        for(int i=0;i<arr.length-1;i++)
        {
            cnt++;
            CurFuncVar.put(arr[i],Integer.toString(cnt));
            //System.out.println(arr[i]);
            Code=Code+"MOVE TEMP "+Integer.toString(cnt)+" TEMP "+Integer.toString(i+1)+"\n";
        }
        Formal_Param_List="";
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        String Vars=(String)n.f7.accept(this, argu);
        if(Vars!=null){
        String[] arr1=Vars.split(",",-1);
        for(int i=0;i<arr1.length;i++)
        {
            cnt++;
            CurFuncVar.put(arr1[i],Integer.toString(cnt));
        }
        }
        n.f8.accept(this, argu);
        String Temp=(String)n.f8.accept(this, argu);;
        if(Temp!=null)
        {
            Code=Code+Temp;
        }
        n.f9.accept(this, argu);
        Code=Code+"RETURN ";
        Code=Code+(String)n.f10.accept(this, argu);
        Code=Code+"\n";
        n.f11.accept(this, argu);
        n.f12.accept(this, argu);
        Code=Code+"\nEND\n";
        Scope_Stack.pop();
        _ret=(R)Code;
        CurFuncVar.clear();
        return _ret;
    }
    
    /**
     * f0 -> FormalParameter()
     * f1 -> ( FormalParameterRest() )*
     */
    public R visit(FormalParameterList n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String a=(String)n.f0.accept(this, argu);
        String b=(String)n.f1.accept(this, argu);
        return _ret;
    }
    
    /**
     * f0 -> Type()
     * f1 -> Identifier()
     */
    public R visit(FormalParameter n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String a=(String)(n.f0.accept(this, argu));
        String b=(String)n.f1.accept(this, argu);
        _ret=(R)(b+",");
        Formal_Param_List=Formal_Param_List+_ret;
        // System.out.println(Convert_Stack_to_String(Scope_Stack)+"/"+b+":"+a+"\n");
        return _ret;
    }
    
    /**
     * f0 -> ","
     * f1 -> FormalParameter()
     */
    public R visit(FormalParameterRest n, A argu) {
        R _ret=null;
        _ret=(R)"";
        n.f0.accept(this, argu);
        _ret=(R)((String)n.f1.accept(this, argu));
        return _ret;
    }
    
    /**
     * f0 -> ArrayType()
     *       | BooleanType()
     *       | IntegerType()
     *       | Identifier()
     */
    public R visit(Type n, A argu) {
        R _ret=null;
        _ret=(R)"";
        return  n.f0.accept(this, argu);
        
    }
    
    /**
     * f0 -> "int"
     * f1 -> "["
     * f2 -> "]"
     */
    public R visit(ArrayType n, A argu) {
        R _ret=null;
        _ret=(R)"";
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        _ret=(R)"int[]";
        return (R)_ret;
    }
    
    /**
     * f0 -> "boolean"
     */
    public R visit(BooleanType n, A argu) {
        R _ret=null;
        _ret=(R)"";
        n.f0.accept(this, argu);
        _ret=(R)"boolean";
        return (R)_ret;
    }
    
    /**
     * f0 -> "int"
     */
    public R visit(IntegerType n, A argu) {
        R _ret=null;
        _ret=(R)"";
        n.f0.accept(this, argu);
        _ret=(R)"int";
        return (R)_ret;
    }
    
    /**
     * f0 -> Block()
     *       | AssignmentStatement()
     *       | ArrayAssignmentStatement()
     *       | IfStatement()
     *       | WhileStatement()
     *       | PrintStatement()
     */
    public R visit(Statement n, A argu) {
        R _ret=null;
        _ret=(R)"";
            _ret=(R)n.f0.accept(this,argu);
        return _ret;
    }
    
    /**
     * f0 -> "{"
     * f1 -> ( Statement() )*
     * f2 -> "}"
     */
    public R visit(Block n, A argu) {
        R _ret=null;
        _ret=(R)"";
        n.f0.accept(this, argu);
        _ret=(R)n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }
    
    /**
     * f0 -> Identifier()
     * f1 -> "="
     * f2 -> Expression()
     * f3 -> ";"
     */
    public R visit(AssignmentStatement n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        String a=(String)n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String b=(String)n.f2.accept(this, argu);
        if(CurFuncVar.get(a)!=null)
        {
            Code=Code+"MOVE "+"TEMP "+CurFuncVar.get(a)+" "+b+"\n";
            
        }
        else
        {
            //Class field
            String Curclass=Convert_Stack_to_String(Scope_Stack).split("/",-1)[1];
            Vector<String> V=Class_Var.get(Curclass);
            int index=0;
            for(int i=0;i<V.size();i++)
            {
                if(V.get(i).equals(a))
                {
                    index=i;
                    break;
                }
            }
            Code=Code+"HSTORE "+"TEMP 0 "+Integer.toString(4*(index+1))+" "+b+"\n";
        }
        n.f3.accept(this, argu);
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Expression()
     * f3 -> "]"
     * f4 -> "="
     * f5 -> Expression()
     * f6 -> ";"
     */
    public R visit(ArrayAssignmentStatement n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        String a=(String)n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String exp1=(String)n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        String arr_reg=new String();
        if(CurFuncVar.get(a)!=null){
            arr_reg=CurFuncVar.get(a);
            cnt++;
            int reg1=cnt;
            cnt++;
            int reg2=cnt;
            cnt++;
            int reg3=cnt;
            Code=Code+"MOVE TEMP "+Integer.toString(reg2)+" TIMES "+"4 "+exp1+"\n";
            Code=Code+"MOVE TEMP "+Integer.toString(reg3)+" PLUS "+"4 "+"TEMP "+Integer.toString(reg2)+"\n";
            Code=Code+"MOVE "+"TEMP "+Integer.toString(reg1)+" "+"PLUS "+"TEMP "+arr_reg+" TEMP "+Integer.toString(reg3)+"\n";
            n.f4.accept(this, argu);
            String exp2=(String)n.f5.accept(this, argu);
            Code=Code+"HSTORE "+"TEMP "+Integer.toString(reg1)+" 0 "+exp2+"\n";
        }
        else
        {
            cnt++;
            int reg1=cnt;
            arr_reg=arr_reg+"BEGIN\n";
            int index=0;
            String Curclass=Convert_Stack_to_String(Scope_Stack).split("/",-1)[1];
            Vector<String> V=Class_Var.get(Curclass);
            String Var_Name=a;
            for(int i=0;i<V.size();i++)
            {
                if(V.get(i).equals(Var_Name))
                {
                    index=i;
                    break;
                }
            }
            arr_reg=arr_reg+"HLOAD TEMP "+Integer.toString(reg1)+" TEMP 0 "+Integer.toString(4*(index+1))+"\n";
            arr_reg=arr_reg+"RETURN TEMP "+Integer.toString(reg1)+"\n";
            arr_reg=arr_reg+"END\n";
            cnt++;
            int reg4=cnt;
            cnt++;
            int reg2=cnt;
            cnt++;
            int reg3=cnt;
            Code=Code+"MOVE TEMP "+Integer.toString(reg2)+" TIMES "+"4 "+exp1+"\n";
            Code=Code+"MOVE TEMP "+Integer.toString(reg3)+" PLUS "+"4 "+"TEMP "+Integer.toString(reg2)+"\n";
            Code=Code+"MOVE "+"TEMP "+Integer.toString(reg4)+" "+"PLUS "+arr_reg+" TEMP "+Integer.toString(reg3)+"\n";
            n.f4.accept(this, argu);
            String exp2=(String)n.f5.accept(this, argu);
            Code=Code+"HSTORE "+"TEMP "+Integer.toString(reg4)+" 0 "+exp2+"\n";
            
        }
        n.f6.accept(this, argu);
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> IfthenElseStatement()
     *       | IfthenStatement()
     */
    public R visit(IfStatement n, A argu) {
        R _ret=null;
        _ret=(R)"";
        _ret=(R)n.f0.accept(this, argu);
        return _ret;
    }
    
    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public R visit(IfthenStatement n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        Code=Code+"CJUMP ";
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        Code=Code+(String)n.f2.accept(this, argu);
        Code=Code+" L"+Integer.toString(lab)+" NOOP\n";
        int temp_lab=lab;
        lab++;
        n.f3.accept(this, argu);
        Code=Code+(String)n.f4.accept(this, argu);
        Code=Code+"\nL"+Integer.toString(temp_lab)+" NOOP\n";
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     * f5 -> "else"
     * f6 -> Statement()
     */
    public R visit(IfthenElseStatement n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        lab++;
        int lab1=lab;
        lab++;int lab2=lab;lab++;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String cond=(String)n.f2.accept(this, argu);
        Code=Code+"CJUMP "+cond+" L"+Integer.toString(lab1)+"\n";
        n.f3.accept(this, argu);
        Code=Code+(String)n.f4.accept(this, argu);
        Code=Code+"JUMP "+"L"+Integer.toString(lab2)+"\n";
        Code=Code+"\nL"+Integer.toString(lab1)+" NOOP\n";
        n.f5.accept(this, argu);
        Code=Code+(String)n.f6.accept(this, argu);
        Code=Code+"\nL"+Integer.toString(lab2)+" NOOP\n";
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> "while"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public R visit(WhileStatement n, A argu) {
        R _ret=null;
        _ret=(R)"";
        lab++;
        int lab1=lab;lab++;int lab2=lab;lab++;
        String Code=new String();
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String Cond=(String)n.f2.accept(this, argu);
        Code=Code+"\nL"+Integer.toString(lab1)+" NOOP\n";
        Code=Code+"CJUMP "+Cond+" L"+Integer.toString(lab2)+"\n";
        n.f3.accept(this, argu);
        String Temp=(String)n.f4.accept(this, argu);
        if(Temp!=null)
        {
            Code=Code+Temp;
        }
        Code=Code+"JUMP "+" L"+Integer.toString(lab1)+"\n";
        Code=Code+"\nL"+Integer.toString(lab2)+" NOOP \n";
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> "System.out.println"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> ";"
     */
    public R visit(PrintStatement n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        Code=Code+"PRINT ";
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        Code=Code+(String)n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        Code=Code+"\n";
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> OrExpression()
     *       | AndExpression()
     *       | CompareExpression()
     *       | neqExpression()
     *       | PlusExpression()
     *       | MinusExpression()
     *       | TimesExpression()
     *       | DivExpression()
     *       | ArrayLookup()
     *       | ArrayLength()
     *       | MessageSend()
     *       | PrimaryExpression()
     */
    public R visit(Expression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        Code=Code+(String)n.f0.accept(this, argu);
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> PrimaryExpression()
     * f1 -> "&&"
     * f2 -> PrimaryExpression()
     */
    public R visit(AndExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        String exp1=(String)n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String exp2=(String)n.f2.accept(this, argu);
        Code=Code+" TIMES "+exp1+" "+exp2+"\n";
        CurType="boolean";
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> PrimaryExpression()
     * f1 -> "||"
     * f2 -> PrimaryExpression()
     */
    public R visit(OrExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        String a=(String)n.f0.accept(this, argu);
        n.f1.accept(this, argu);
       String b=(String) n.f2.accept(this, argu);
        Code=Code+"NE 0 PLUS "+a+" "+b+"\n";
        CurType="boolean";
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> PrimaryExpression()
     * f1 -> "<="
     * f2 -> PrimaryExpression()
     */
    public R visit(CompareExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        Code=Code+"LE ";
        Code=Code+(String)n.f0.accept(this, argu)+" ";
        n.f1.accept(this, argu);
        Code=Code+(String)n.f2.accept(this, argu)+"\n";
        _ret=(R)Code;
        CurType="boolean";
        return _ret;
    }
    
    /**
     * f0 -> PrimaryExpression()
     * f1 -> "!="
     * f2 -> PrimaryExpression()
     */
    public R visit(neqExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        Code=Code+"NE ";
        Code=Code+(String)n.f0.accept(this, argu)+" ";
        n.f1.accept(this, argu);
        Code=Code+(String)n.f2.accept(this, argu)+"\n";
        _ret=(R)Code;
        CurType="boolean";
        return _ret;
    }
    
    /**
     * f0 -> PrimaryExpression()
     * f1 -> "+"
     * f2 -> PrimaryExpression()
     */
    public R visit(PlusExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        Code=Code+"PLUS ";
        Code=Code+(String)n.f0.accept(this, argu)+" ";
        n.f1.accept(this, argu);
        Code=Code+(String)n.f2.accept(this, argu)+" ";
        _ret=(R)Code;
        CurType="int";
        return _ret;
    }
    
    /**
     * f0 -> PrimaryExpression()
     * f1 -> "-"
     * f2 -> PrimaryExpression()
     */
    public R visit(MinusExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        Code=Code+"MINUS ";
        Code=Code+(String)n.f0.accept(this, argu)+" ";
        n.f1.accept(this, argu);
        Code=Code+(String)n.f2.accept(this, argu)+" ";
        _ret=(R)Code;
        CurType="int";
        return _ret;
    }
    
    /**
     * f0 -> PrimaryExpression()
     * f1 -> "*"
     * f2 -> PrimaryExpression()
     */
    public R visit(TimesExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        Code=Code+"TIMES ";
        Code=Code+(String)n.f0.accept(this, argu)+" ";
        n.f1.accept(this, argu);
        Code=Code+(String)n.f2.accept(this, argu)+" ";
        _ret=(R)Code;
        CurType="int";
        return _ret;
    }
    
    /**
     * f0 -> PrimaryExpression()
     * f1 -> "/"
     * f2 -> PrimaryExpression()
     */
    public R visit(DivExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        Code=Code+"DIV ";
        Code=Code+(String)n.f0.accept(this, argu)+" ";
        n.f1.accept(this, argu);
        Code=Code+(String)n.f2.accept(this, argu)+" ";
        _ret=(R)Code;
        CurType="int";
        return _ret;
    }
    
    /**
     * f0 -> PrimaryExpression()
     * f1 -> "["
     * f2 -> PrimaryExpression()
     * f3 -> "]"
     */
    public R visit(ArrayLookup n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        String a=(String)n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String b=(String)n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        Code=Code+"BEGIN\n";
        cnt++;
        int reg1=cnt;
        cnt++;
        int reg2=cnt;
        cnt++;
        int reg3=cnt;
        cnt++;
        int reg4=cnt;
        cnt++;
        int reg5=cnt;
        Code=Code+"MOVE "+"TEMP "+Integer.toString(reg1)+" "+"TIMES 4 "+b+"\n";
        Code=Code+"MOVE "+"TEMP "+Integer.toString(reg5)+" "+"PLUS 4 "+"TEMP "+Integer.toString(reg1)+" \n";
        Code=Code+"MOVE "+"TEMP "+Integer.toString(reg2)+" "+a+"\n";
        Code=Code+"MOVE "+"TEMP "+Integer.toString(reg3)+" "+"PLUS "+"TEMP "+Integer.toString(reg5)+" "+"TEMP "+Integer.toString(reg2)+"\n";
        Code=Code+"HLOAD "+"TEMP "+Integer.toString(reg4)+" "+"TEMP "+Integer.toString(reg3)+" 0\n";
        Code=Code+"RETURN "+"TEMP "+Integer.toString(reg4)+"\n";
        Code=Code+"END\n";
        _ret=(R)Code;
        CurType="int";
        return _ret;
    }
    
    /**
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> "length"
     */
    public R visit(ArrayLength n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        String a=(String)n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        cnt++;
        int reg=cnt;
        Code=Code+"BEGIN\n";
        Code=Code+"HLOAD TEMP "+Integer.toString(reg)+" "+a+" 0\n";
        Code=Code+"RETURN TEMP "+Integer.toString(reg)+"\n";
        Code=Code+"END\n";
        CurType="int";
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( ExpressionList() )?
     * f5 -> ")"
     */
    public R visit(MessageSend n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String exp1=(String)n.f0.accept(this, argu);

        String Func_obj=new String();
        String Code=new String();
        for(int i=0;i<CurType.length();i++)
        {
            Func_obj=Func_obj+CurType.charAt(i);
        }
        n.f1.accept(this, argu);
        String Func_Name=(String)n.f2.accept(this, argu);
        String Func_Key="/"+Func_obj+"/"+Func_Name;
        String Func_Sign=Check_Func_Scope(Func_Key);
        String Func_Type=(String)(Func_Sign.split(",",-1)[0]);
        Vector<String> Temp=(Vector<String>)Class_Func.get(Func_obj);
        int index=-1;
        for(int i=0;i<Temp.size();i++)
        {
            if(Temp.get(i).split("_",2)[1].equals(Func_Name))
            {
                index=i;
                break;
            }
        }
        cnt++;
        int reg1=cnt;
        cnt++;
        int reg2=cnt;
        cnt++;
        int reg3=cnt;
        Code=Code+"CALL\nBEGIN\n";
        Code=Code+"MOVE TEMP "+Integer.toString(reg1)+" "+exp1+"\n";
        Code=Code+"HLOAD TEMP "+Integer.toString(reg2)+" TEMP "+Integer.toString(reg1)+" 0\n";
        Code=Code+"HLOAD TEMP "+Integer.toString(reg3)+" TEMP "+Integer.toString(reg2)+" "+Integer.toString(index*4)+"\n";
        Code=Code+"RETURN TEMP "+Integer.toString(reg3)+"\n";
        Code=Code+" END\n";
        n.f3.accept(this, argu);
        String arglist="";
        arglist=arglist+" TEMP "+Integer.toString(reg1)+" ";
        String Tmp=(String)n.f4.accept(this, argu);
        if(Tmp!=null)
        {
            arglist=arglist+Tmp;
        }
        Code=Code+"( "+arglist+" )\n";
        n.f5.accept(this, argu);
        CurType=Func_Type;
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> Expression()
     * f1 -> ( ExpressionRest() )*
     */
    public R visit(ExpressionList n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        Code="";
        String t1=(String)n.f0.accept(this, argu)+" ";
        String t2=(String)n.f1.accept(this, argu)+" ";
        if(t1!=null)
        {
            Code=Code+t1;
        }
        if(t2!=null)
        {
            Code=Code+t2;
        }
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> ","
     * f1 -> Expression()
     */
    public R visit(ExpressionRest n, A argu) {
        R _ret=null;
        _ret=(R)"";
        n.f0.accept(this, argu);
        String Temp=(String)n.f1.accept(this, argu);
        if(Temp!=null)
        {
            _ret=(R)Temp;
        }
        return _ret;
    }
    
    /**
     * f0 -> IntegerLiteral()
     *       | TrueLiteral()
     *       | FalseLiteral()
     *       | Identifier()
     *       | ThisExpression()
     *       | ArrayAllocationExpression()
     *       | AllocationExpression()
     *       | NotExpression()
     *       | BracketExpression()
     */
    public R visit(PrimaryExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        String Temp=(String)n.f0.accept(this, argu);
        int ch=n.f0.which;
        if(ch==3)
        {
            String Var_Name=Temp;
            if(CurFuncVar.get(Var_Name)!=null){
                Code=Code+"TEMP "+(String)CurFuncVar.get(Var_Name);
                String type=(check_var_scope(Convert_Stack_to_String(Scope_Stack)+"/"+Var_Name));CurType=type;
            }
            else
            {
                cnt++;
                int reg1=cnt;
                Code=Code+"BEGIN\n";
                int index=0;
                String Curclass=Convert_Stack_to_String(Scope_Stack).split("/",-1)[1];
                Vector<String> V=Class_Var.get(Curclass);
                for(int i=0;i<V.size();i++)
                {
                    if(V.get(i).equals(Var_Name))
                    {
                        index=i;
                        break;
                    }
                }
                Code=Code+"HLOAD TEMP "+Integer.toString(reg1)+" TEMP 0 "+Integer.toString(4*(index+1))+"\n";
                Code=Code+"RETURN TEMP "+Integer.toString(reg1)+"\n";
                Code=Code+"END\n";
                CurType=(Var_Map.get("/"+Curclass+"/"+Var_Name));
                
            }
        }
        else
        {
            if(Temp!=null){
                Code=Code+Temp;
            }
        }
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public R visit(IntegerLiteral n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        n.f0.accept(this, argu);
        Code=Code+n.f0.toString();
        _ret=(R)Code;
        CurType="int";
        return _ret;
    }
    
    /**
     * f0 -> "true"
     */
    public R visit(TrueLiteral n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();Code="1";
        n.f0.accept(this, argu);
        _ret=(R)Code;
        CurType="boolean";
        return _ret;
    }
    
    /**
     * f0 -> "false"
     */
    public R visit(FalseLiteral n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();Code="0";
        n.f0.accept(this, argu);
        _ret=(R)Code;
        CurType="boolean";
        return _ret;
    }
    
    /**
     * f0 -> <IDENTIFIER>
     */
    public R visit(Identifier n, A argu) {
        R _ret=null;
        _ret=(R)"";
        n.f0.accept(this,argu);
        _ret=(R)n.f0.toString();
        //System.out.println(_ret);
        CurType=(String)_ret;
        return _ret;
    }
    
    /**
     * f0 -> "this"
     */
    public R visit(ThisExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        n.f0.accept(this, argu);
        CurType=Convert_Stack_to_String(Scope_Stack).split("/",-1)[1];
        _ret=(R)" TEMP 0 ";
        CurType=(String)Convert_Stack_to_String(Scope_Stack).split("/",-1)[1];
        return _ret;
    }
    
    /**
     * f0 -> "new"
     * f1 -> "int"
     * f2 -> "["
     * f3 -> Expression()
     * f4 -> "]"
     */
    public R visit(ArrayAllocationExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        String a=(String)n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        cnt++;
        int reg=cnt;
        cnt++;
        int reg1=cnt;
        cnt++;
        int reg2=cnt;
        Code=Code+"BEGIN\n";
        Code=Code+"MOVE TEMP "+Integer.toString(reg)+" TIMES 4 "+a+"\n";
        Code=Code+"MOVE TEMP "+Integer.toString(reg2)+" PLUS 4 TEMP "+Integer.toString(reg)+"\n";
        Code=Code+"MOVE TEMP "+Integer.toString(reg1)+" HALLOCATE "+"TEMP "+Integer.toString(reg2)+"\n";
        Code=Code+"HSTORE TEMP "+Integer.toString(reg1)+" 0 "+a+"\n";
        lab++;
        cnt++;
        int reg5=cnt;
        int l=lab;
        lab++;
        int r=lab;
        Code=Code+"MOVE TEMP "+Integer.toString(reg5)+" PLUS "+"TEMP "+Integer.toString(reg1)+" TEMP "+Integer.toString(reg)+"\n";
        Code=Code+"\nL"+Integer.toString(l)+" NOOP \n";
        
        Code=Code+"CJUMP NE "+"TEMP "+Integer.toString(reg)+" 0 "+" L"+Integer.toString(r)+"\n";
       
        cnt++;
        Code=Code+"HSTORE TEMP "+Integer.toString(reg5)+" 0 "+" 0 \n";
        Code=Code+"MOVE TEMP "+Integer.toString(reg5)+" MINUS TEMP "+Integer.toString(reg5)+" 4 \n";
        Code=Code+"MOVE TEMP "+Integer.toString(reg)+" MINUS TEMP "+Integer.toString(reg)+" 4 \n";
        Code=Code+"JUMP L"+Integer.toString(l)+"\n";
        Code=Code+"L"+Integer.toString(r)+" NOOP\n";
        
        Code=Code+"RETURN "+"TEMP "+Integer.toString(reg1)+"\n";
        Code=Code+"END\n";
        _ret=(R)Code;
        CurType="int[]";
        return _ret;
    }
    
    /**
     * f0 -> "new"
     * f1 -> Identifier()
     * f2 -> "("
     * f3 -> ")"
     */
    public R visit(AllocationExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        n.f0.accept(this, argu);
        
        
        String a=(String)n.f1.accept(this, argu);
        int num_vars=0;
        if(Class_Var.get(a)!=null)
        {
            num_vars=Class_Var.get(a).size();
        }
        int num_funcs=0;
        if(Class_Func.get(a)!=null)
        {
            num_funcs=Class_Func.get(a).size();
        }
        cnt++;
        int reg1=cnt;
        cnt++;
        int reg2=cnt;
        cnt++;
        int reg3=cnt;
        cnt++;
        int reg4=cnt;
        Code=Code+"BEGIN\n";
        Code=Code+"MOVE TEMP "+Integer.toString(reg3)+" HALLOCATE "+" "+Integer.toString(4*num_funcs)+"\n";
        Code=Code+"MOVE TEMP "+Integer.toString(reg4)+" HALLOCATE "+" "+Integer.toString(4*(num_vars+1))+"\n";
        Code=Code+"HSTORE "+"TEMP "+Integer.toString(reg4)+" 0 "+"TEMP "+Integer.toString(reg3)+"\n";
        for(int i=0;i<num_vars;i++)
        {
            Code=Code+"HSTORE TEMP "+Integer.toString(reg4)+" "+Integer.toString(4*i+4)+" 0\n";
        }
        cnt++;
        for(int i=0;i<num_funcs;i++)
        {
            Code=Code+"HSTORE TEMP "+Integer.toString(reg3)+" "+Integer.toString(4*i)+" "+Class_Func.get(a).get(i)+"\n";
        }
        Code=Code+"RETURN TEMP "+Integer.toString(reg4)+"\n";
        Code=Code+"END\n";
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        _ret=(R)Code;
        CurType=a;
        return _ret;
    }
    
    /**
     * f0 -> "!"
     * f1 -> Expression()
     */
    public R visit(NotExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        Code=Code+"MINUS ";
        Code=Code+"1 "+"\n";
        n.f0.accept(this, argu);
        Code=Code+(String)n.f1.accept(this, argu);
        _ret=(R)Code;
        CurType="boolean";
        return _ret;
    }
    
    /**
     * f0 -> "("
     * f1 -> Expression()
     * f2 -> ")"
     */
    public R visit(BracketExpression n, A argu) {
        R _ret=null;
        _ret=(R)"";
        String Code=new String();
        Code=Code+"BEGIN\n";
        n.f0.accept(this, argu);
        Code=Code+"MOVE TEMP "+Integer.toString(cnt)+"\n";
        int temp_cnt=cnt;
        cnt++;
        Code=Code+(String)n.f1.accept(this, argu)+"\n";
        n.f2.accept(this, argu);
        Code=Code+"RETURN TEMP "+Integer.toString(temp_cnt)+"\n";
        Code=Code+"END\n";
        _ret=(R)Code;
        return _ret;
    }
    
    /**
     * f0 -> Identifier()
     * f1 -> ( IdentifierRest() )*
     */
    public R visit(IdentifierList n, A argu) {
        R _ret=null;
        _ret=(R)"";
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }
    
    /**
     * f0 -> ","
     * f1 -> Identifier()
     */
    public R visit(IdentifierRest n, A argu) {
        R _ret=null;
        _ret=(R)"";
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }
    
}


//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
    public static String cur_func=new String();
    public static String cur_pass=new String();
    public static int lstch=0;
    public static int cur_space=0;
   public R visit(NodeList n) {
      R _ret=null;
       String Code=new String();
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         Code=Code+(String)e.nextElement().accept(this);
         _count++;
      }
       _ret=(R)Code;
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
          String Code=new String();
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            Code=Code+(String)e.nextElement().accept(this);
            _count++;
         }
          _ret=(R)Code;
         return _ret;
      }
      else
         return (R)"";
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
          return (R)((String)n.node.accept(this)+":\tnop\n");
      else
         return (R)"";
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
       String Code=new String();
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         Code=Code+(String)e.nextElement().accept(this);
         _count++;
      }
       _ret=(R)Code;
      return _ret;
   }

   public R visit(NodeToken n) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
       String Code=new String();
      n.f0.accept(this);
       Code=Code+"\t.text\n\t.globl\tmain\nmain:\n";
       Code=Code+"move $fp, $sp\nsubu $sp, $sp, 4\nsw $ra, -4($fp)\n";
       cur_func="main";
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      cur_space=Integer.parseInt((String)n.f5.accept(this));
       Code=Code+"sub $sp, $sp, "+Integer.toString(4*cur_space)+"\n";
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      Code=Code+(String)n.f10.accept(this);
      n.f11.accept(this);
       Code=Code+"lw $ra, -4($fp)\n";
       Code=Code+"add $sp, $sp, "+Integer.toString(4*cur_space+4)+"\n";
       Code=Code+"j $ra\n";
       n.f12.accept(this);
      Code=Code+(String)n.f13.accept(this)+"\n";
      n.f14.accept(this);
       Code=Code+"\n\t.text\n\t.globl _halloc\n_halloc:\n\tli $v0, 9\n\tsyscall\n\tj $ra\n";
       Code=Code+"\n\t.text\n\t.globl _print\n_print:\n\tli $v0, 1\n\tsyscall\n\tla $a0, newl\n\tli $v0, 4\n\tsyscall\n\tj $ra\n";
       Code=Code+"\n.data\n.align   0\nnewl:    .asciiz \"\\n\"\n.data\n.align   0\nstr_er:  .asciiz \" ERROR: abnormal termination\\n\" ";
       System.out.println(Code);
       _ret=(R)Code;
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n) {
      R _ret=(R)"";
      String Temp=(String)n.f0.accept(this);
       _ret=(R)Temp;
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n) {
      R _ret=null;
       String Code="";
      cur_func=(String)n.f0.accept(this);
       Code=Code+"\t.text\n\t.globl\t"+cur_func+"\n"+cur_func+":\n";
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      cur_space=Integer.parseInt((String)n.f5.accept(this));
       int space=4*cur_space;
       Code=Code+"sw $ra, -4($fp)\n";
       Code=Code+"sub $sp, $sp, "+Integer.toString(space+8)+"\n";
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      Code=Code+(String)n.f10.accept(this);
      n.f11.accept(this);
       Code=Code+"lw $ra, -4($fp)\n";
       Code=Code+"add $sp, $sp, "+Integer.toString(space+8)+"\n";
       Code=Code+"lw $fp, -8($sp)\n";
       Code=Code+"j $ra\n";
      n.f12.accept(this);
       _ret=(R)Code;
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n) {
      R _ret=(R)"";
      _ret=(R)n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n) {
      R _ret=null;
      n.f0.accept(this);
       _ret=(R)"nop\n";
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n) {
      R _ret=null;
      n.f0.accept(this);
       String Temp="li $v0, 4\nla $a0, str_er\nsyscall\nli $v0, 10\nsyscall\n";
       _ret=(R)Temp;
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n) {
      R _ret=(R)"";
       String temp=new String();temp=temp+"beqz ";
      n.f0.accept(this);
      temp=temp+(String)n.f1.accept(this)+" ";
      temp=temp+(String)n.f2.accept(this);
       temp=temp+"\n";
       _ret=(R)temp;
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n) {
      R _ret=(R)"";
       String temp="";
      n.f0.accept(this);
       temp=temp+"b ";
      temp=temp+(String)n.f1.accept(this)+"\n";
       _ret=(R)temp;
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n) {
      R _ret=null;
       String temp=new String();
       temp=temp+"sw ";
      n.f0.accept(this);
      temp=temp+(String)n.f3.accept(this)+", ";
      temp=temp+(String)n.f2.accept(this)+"(";
      temp=temp+(String)n.f1.accept(this)+")\n";
       _ret=(R)temp;
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n) {
      R _ret=null;
       String temp=new String();
      n.f0.accept(this);
       temp=temp+"lw ";
       temp=temp+(String)n.f1.accept(this)+", ";
       temp=temp+(String)n.f3.accept(this)+"(";
       temp=temp+(String)n.f2.accept(this)+")\n";
       _ret=(R)temp;
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n) {
      R _ret=null;
       String Temp=new String();
      n.f0.accept(this);
       Temp=Temp+"move ";
      Temp=Temp+(String)n.f1.accept(this)+" $v0\n";
      String bef=(String)n.f2.accept(this);
       Temp=bef+Temp;
       _ret=(R)Temp;
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n) {
      R _ret=(R)"";
      n.f0.accept(this);
      String a=(String)n.f1.accept(this);
       String Temp=new String();
       if(n.f1.f0.which==0)
       {
           Temp=Temp+"move $a0 "+a+"\n";
           Temp=Temp+"jal _print\n";
       }
       else
       {
           if(n.f1.f0.which==1)
           {
               Temp=Temp+"li $a0 "+a+"\n";
               Temp=Temp+"jal _print\n";
           }
           else
           {
               Temp=Temp+"la $a0 "+a+"\n";
               Temp=Temp+"jal _print\n";
           }
       }
       _ret=(R)Temp;
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n) {
      R _ret=(R)"";
       String Temp="lw ";
      n.f0.accept(this);
      Temp=Temp+(String)n.f1.accept(this)+", ";
      Temp=Temp+(String)n.f2.accept(this)+"\n";
       _ret=(R)Temp;
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n) {
      R _ret=(R)"";
       String Temp="sw";
      n.f0.accept(this);
      Temp=Temp+" "+(String)n.f2.accept(this);
       Temp=Temp+", "+(String)n.f1.accept(this);
       Temp=Temp+"\n";
       _ret=(R)Temp;
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n) {
      R _ret=(R)"";
      n.f0.accept(this);
       String Temp="";
      int a=Integer.parseInt((String)n.f1.accept(this));
      String b=(String)n.f2.accept(this);
       Temp=Temp+"sw "+b+", -"+Integer.toString(4*a+8)+" ($fp)\n";
       cur_pass=cur_pass+Temp;
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n) {
      R _ret=(R)"";
      n.f0.accept(this);
      String a=(String)n.f1.accept(this);
       String Temp="";
       Temp=Temp+"sw $fp, -8($sp)\n";
       Temp=Temp+"move $fp $sp\n";
       //Temp=Temp+"sw $ra, -4($fp)\n";
       Temp=Temp+cur_pass;cur_pass="";
       if(lstch==0)
       {
           Temp=Temp+"jalr "+a+"\n";
       }
       else
       {
           if(lstch==2)
           {
               Temp=Temp+"jal "+a+"\n";
           }
       }
       
       _ret=(R)Temp;
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n) {
       R _ret=(R)"";
      _ret=(R)n.f0.accept(this);
       String a=(String)_ret;
       String Temp="";
       if(n.f0.which==2)
       {
           if(lstch==0)
           {
               Temp=Temp+"move $v0 "+a+"\n";
           }
           else
           {
               if(lstch==1)
               {
                   Temp=Temp+"li $v0 "+a+"\n";
               }
               else
               {
                   Temp=Temp+"la $v0 "+a+"\n";
               }
           }
           _ret=(R)Temp;
       }
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n) {
      R _ret=null;
      n.f0.accept(this);
       String Temp=new String();
      String a=(String)n.f1.accept(this);
       if(n.f1.f0.which==0)
       {
           Temp=Temp+"move $a0 "+a+"\n";
           Temp=Temp+"jal _halloc\n";
       }
       else
       {
           if(n.f1.f0.which==1)
           {
               Temp=Temp+"li $a0 "+a+"\n";
               Temp=Temp+"jal _halloc\n";
           }
           else
           {
               Temp=Temp+"la $a0 "+a+"\n";
               Temp=Temp+"jal _halloc\n";
           }
       }
       _ret=(R)Temp;
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n) {
      R _ret=null;
       String Temp=new String();
      String op=(String)n.f0.accept(this);
      String reg=(String)n.f1.accept(this);
      String simp=(String)n.f2.accept(this);
       switch(op)
       {
           case "LE":
               Temp=Temp+"sle $v0, "+reg+", "+simp+"\n";
               break;
           case "NE":
               Temp=Temp+"sne $v0, "+reg+", "+simp+"\n";
               break;
           case "PLUS":
               Temp=Temp+"add $v0, "+reg+", "+simp+"\n";
               break;
           case "MINUS":
               Temp=Temp+"sub $v0, "+reg+", "+simp+"\n";
               break;
           case "TIMES":
               Temp=Temp+"mul $v0, "+reg+", "+simp+"\n";
               break;
           case "DIV":
               Temp=Temp+"div $v0, "+reg+", "+simp+"\n";
               break;
       }
       _ret=(R)Temp;
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n) {
      R _ret=(R)"";
      _ret=(R)n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n) {
      R _ret=null;
      n.f0.accept(this);
      int pos=Integer.parseInt((String)n.f1.accept(this));
       pos=4*pos+12;
       if(cur_func=="main")
       {
           pos-=4;
       }
       _ret=(R)("-"+Integer.toString(pos)+"($fp)\n");
      return _ret;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n) {
      R _ret=(R)"";
      _ret=(R)n.f0.accept(this);
       lstch=n.f0.which;
      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n) {
      R _ret=(R)"";
       _ret=(R)("$"+(String)n.f0.accept(this));
       
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      n.f0.accept(this);
       _ret=(R)n.f0.toString();
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n) {
      R _ret=null;
      n.f0.accept(this);
       _ret=(R)n.f0.toString();
      return _ret;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n) {
      R _ret=(R)"";
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

}
